{"ast":null,"code":"import axios from \"axios\"; // import * as types from \"./constants\";\n\nimport { FETCH_ALL_TRANSACTIONS_PENDING, FETCH_ALL_TRANSACTIONS_SUCCESS, FETCH_ALL_TRANSACTIONS_FAILED, ADD_NEW_TRANSACTION_SUCCESS, ADD_NEW_TRANSACTION_PENDING, ADD_NEW_TRANSACTION_FAILED, UPDATE_TRANSACTION_PENDING, UPDATE_TRANSACTION_FAILED, UPDATE_TRANSACTION_SUCCESS, DELETE_TRANSACTION_FAILED, DELETE_TRANSACTION_PENDING, DELETE_TRANSACTION_SUCCESS, FETCH_TRANSACTION_PENDING, FETCH_TRANSACTION_SUCCESS, FETCH_TRANSACTION_FAILED, ADD_NEW_STRIPE_SUCCESS } from \"./constants\"; // Set your secret key. Remember to switch to your live secret key in production!\n// See your keys here: https://dashboard.stripe.com/account/apikeys\n\nconst stripe = require(\"stripe\")(\"sk_test_a4JBNRdXbbh1atscK9VePkJ8001hNVLtag\"); // (async () => {\n//   const paymentIntent = await stripe.paymentIntents.create({\n//     amount: 1000,\n//     currency: \"usd\",\n//     payment_method_types: [\"card\"],\n//     receipt_email: \"jenny.rosen@example.com\"\n//   });\n// })();\n// Add new stripeTransaction\n\n\nexport const stripeTransaction = newStripe => async dispatch => {\n  const paymentIntent = await stripe.paymentIntents.create({\n    amount: 1000,\n    currency: \"usd\",\n    payment_method_types: [\"card\"],\n    receipt_email: \"george.1556@gmail.com\"\n  });\n  console.log(\"paymentintent: \", paymentIntent);\n  dispatch({\n    type: ADD_NEW_STRIPE_SUCCESS,\n    payload: paymentIntent\n  });\n};\nexport const fetchAllTransactions = () => async dispatch => {\n  dispatch({\n    type: FETCH_ALL_TRANSACTIONS_PENDING\n  });\n\n  try {\n    let response = await axios.get(`http://localhost:8080/transactions`);\n    dispatch({\n      type: FETCH_ALL_TRANSACTIONS_SUCCESS,\n      payload: response.data\n    });\n  } catch (err) {\n    dispatch({\n      type: FETCH_ALL_TRANSACTIONS_FAILED,\n      payload: err\n    });\n  }\n};\nexport const fetchTransaction = id => async dispatch => {\n  dispatch({\n    type: FETCH_TRANSACTION_PENDING\n  });\n\n  try {\n    let response = await axios.get(`http://localhost:8080/transactions/${id}`);\n    dispatch({\n      type: FETCH_TRANSACTION_SUCCESS,\n      payload: response.data\n    });\n  } catch (err) {\n    dispatch({\n      type: FETCH_TRANSACTION_FAILED,\n      payload: err\n    });\n  }\n}; // Add new Transaction\n\nexport const addNewTransaction = newTransaction => async dispatch => {\n  dispatch({\n    type: ADD_NEW_TRANSACTION_PENDING\n  });\n\n  try {\n    let response = await axios.post(`http://localhost:8000/transaction/{newTransaction.productId}`, newTransaction);\n    dispatch({\n      type: ADD_NEW_TRANSACTION_SUCCESS,\n      payload: response.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ADD_NEW_TRANSACTION_FAILED,\n      payload: err\n    });\n  }\n}; // Add new PRODUCT\n// export const addNewPRODUCT = newPRODUCT => async dispatch => {\n//   dispatch({\n//     type: ADD_NEW_PRODUCT_PENDING\n//   });\n//   try {\n//     let response = await axios.post(\n//       `http://localhost:8000/PRODUCTs`,\n//       newPRODUCT\n//     );\n//     dispatch({\n//       type: ADD_NEW_PRODUCT_SUCCESS,\n//       payload: response.data\n//     });\n//   } catch (err) {\n//     dispatch({\n//       type: ADD_NEW_PRODUCT_FAILED,\n//       payload: err\n//     });\n//   }\n// };\n// // Delete a PRODUCT\n// export const deletePRODUCT = id => async dispatch => {\n//   dispatch({\n//     type: DELETE_PRODUCT_PENDING\n//   });\n//   try {\n//     let response = await axios.delete(`http://localhost:8000/PRODUCTs/${id}`);\n//     dispatch({\n//       type: DELETE_PRODUCT_SUCCESS,\n//       payload: response.data\n//     });\n//   } catch (err) {\n//     dispatch({\n//       type: DELETE_PRODUCT_FAILED,\n//       payload: err\n//     });\n//   }\n// };\n// // Update PRODUCT\n// export const updatePRODUCT = (updatePRODUCT, id) => async dispatch => {\n//   dispatch({\n//     type: UPDATE_PRODUCT_PENDING\n//   });\n//   try {\n//     let response = await axios.patch(\n//       `http://localhost:8000/PRODUCTs/${id}`,\n//       updatePRODUCT\n//     );\n//     dispatch({\n//       type: UPDATE_PRODUCT_SUCCESS,\n//       payload: response.data\n//     });\n//   } catch (err) {\n//     dispatch({\n//       type: UPDATE_PRODUCT_FAILED,\n//       payload: err\n//     });\n//   }\n// };","map":{"version":3,"sources":["/Users/george/Desktop/h2studiofrontend/src/store/transactions/actions.js"],"names":["axios","FETCH_ALL_TRANSACTIONS_PENDING","FETCH_ALL_TRANSACTIONS_SUCCESS","FETCH_ALL_TRANSACTIONS_FAILED","ADD_NEW_TRANSACTION_SUCCESS","ADD_NEW_TRANSACTION_PENDING","ADD_NEW_TRANSACTION_FAILED","UPDATE_TRANSACTION_PENDING","UPDATE_TRANSACTION_FAILED","UPDATE_TRANSACTION_SUCCESS","DELETE_TRANSACTION_FAILED","DELETE_TRANSACTION_PENDING","DELETE_TRANSACTION_SUCCESS","FETCH_TRANSACTION_PENDING","FETCH_TRANSACTION_SUCCESS","FETCH_TRANSACTION_FAILED","ADD_NEW_STRIPE_SUCCESS","stripe","require","stripeTransaction","newStripe","dispatch","paymentIntent","paymentIntents","create","amount","currency","payment_method_types","receipt_email","console","log","type","payload","fetchAllTransactions","response","get","data","err","fetchTransaction","id","addNewTransaction","newTransaction","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SACEC,8BADF,EAEEC,8BAFF,EAGEC,6BAHF,EAIEC,2BAJF,EAKEC,2BALF,EAMEC,0BANF,EAOEC,0BAPF,EAQEC,yBARF,EASEC,0BATF,EAUEC,yBAVF,EAWEC,0BAXF,EAYEC,0BAZF,EAaEC,yBAbF,EAcEC,yBAdF,EAeEC,wBAfF,EAgBEC,sBAhBF,QAiBO,aAjBP,C,CAmBA;AACA;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkB,4CAAlB,CAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,OAAO,MAAMC,iBAAiB,GAAGC,SAAS,IAAI,MAAMC,QAAN,IAAkB;AAC9D,QAAMC,aAAa,GAAG,MAAML,MAAM,CAACM,cAAP,CAAsBC,MAAtB,CAA6B;AACvDC,IAAAA,MAAM,EAAE,IAD+C;AAEvDC,IAAAA,QAAQ,EAAE,KAF6C;AAGvDC,IAAAA,oBAAoB,EAAE,CAAC,MAAD,CAHiC;AAIvDC,IAAAA,aAAa,EAAE;AAJwC,GAA7B,CAA5B;AAOAC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BR,aAA/B;AACAD,EAAAA,QAAQ,CAAC;AACPU,IAAAA,IAAI,EAAEf,sBADC;AAEPgB,IAAAA,OAAO,EAAEV;AAFF,GAAD,CAAR;AAID,CAbM;AAeP,OAAO,MAAMW,oBAAoB,GAAG,MAAM,MAAMZ,QAAN,IAAkB;AAC1DA,EAAAA,QAAQ,CAAC;AACPU,IAAAA,IAAI,EAAE9B;AADC,GAAD,CAAR;;AAGA,MAAI;AACF,QAAIiC,QAAQ,GAAG,MAAMlC,KAAK,CAACmC,GAAN,CAAW,oCAAX,CAArB;AACAd,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAE7B,8BADC;AAEP8B,MAAAA,OAAO,EAAEE,QAAQ,CAACE;AAFX,KAAD,CAAR;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZhB,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAE5B,6BADC;AAEP6B,MAAAA,OAAO,EAAEK;AAFF,KAAD,CAAR;AAID;AACF,CAhBM;AAkBP,OAAO,MAAMC,gBAAgB,GAAGC,EAAE,IAAI,MAAMlB,QAAN,IAAkB;AACtDA,EAAAA,QAAQ,CAAC;AACPU,IAAAA,IAAI,EAAElB;AADC,GAAD,CAAR;;AAGA,MAAI;AACF,QAAIqB,QAAQ,GAAG,MAAMlC,KAAK,CAACmC,GAAN,CAAW,sCAAqCI,EAAG,EAAnD,CAArB;AACAlB,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAEjB,yBADC;AAEPkB,MAAAA,OAAO,EAAEE,QAAQ,CAACE;AAFX,KAAD,CAAR;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZhB,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAEhB,wBADC;AAEPiB,MAAAA,OAAO,EAAEK;AAFF,KAAD,CAAR;AAID;AACF,CAhBM,C,CAkBP;;AACA,OAAO,MAAMG,iBAAiB,GAAGC,cAAc,IAAI,MAAMpB,QAAN,IAAkB;AACnEA,EAAAA,QAAQ,CAAC;AACPU,IAAAA,IAAI,EAAE1B;AADC,GAAD,CAAR;;AAIA,MAAI;AACF,QAAI6B,QAAQ,GAAG,MAAMlC,KAAK,CAAC0C,IAAN,CAClB,8DADkB,EAEnBD,cAFmB,CAArB;AAIApB,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAE3B,2BADC;AAEP4B,MAAAA,OAAO,EAAEE,QAAQ,CAACE;AAFX,KAAD,CAAR;AAID,GATD,CASE,OAAOC,GAAP,EAAY;AACZhB,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAEzB,0BADC;AAEP0B,MAAAA,OAAO,EAAEK;AAFF,KAAD,CAAR;AAID;AACF,CApBM,C,CAsBP;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios from \"axios\";\n// import * as types from \"./constants\";\nimport {\n  FETCH_ALL_TRANSACTIONS_PENDING,\n  FETCH_ALL_TRANSACTIONS_SUCCESS,\n  FETCH_ALL_TRANSACTIONS_FAILED,\n  ADD_NEW_TRANSACTION_SUCCESS,\n  ADD_NEW_TRANSACTION_PENDING,\n  ADD_NEW_TRANSACTION_FAILED,\n  UPDATE_TRANSACTION_PENDING,\n  UPDATE_TRANSACTION_FAILED,\n  UPDATE_TRANSACTION_SUCCESS,\n  DELETE_TRANSACTION_FAILED,\n  DELETE_TRANSACTION_PENDING,\n  DELETE_TRANSACTION_SUCCESS,\n  FETCH_TRANSACTION_PENDING,\n  FETCH_TRANSACTION_SUCCESS,\n  FETCH_TRANSACTION_FAILED,\n  ADD_NEW_STRIPE_SUCCESS\n} from \"./constants\";\n\n// Set your secret key. Remember to switch to your live secret key in production!\n// See your keys here: https://dashboard.stripe.com/account/apikeys\nconst stripe = require(\"stripe\")(\"sk_test_a4JBNRdXbbh1atscK9VePkJ8001hNVLtag\");\n\n// (async () => {\n//   const paymentIntent = await stripe.paymentIntents.create({\n//     amount: 1000,\n//     currency: \"usd\",\n//     payment_method_types: [\"card\"],\n//     receipt_email: \"jenny.rosen@example.com\"\n//   });\n// })();\n\n// Add new stripeTransaction\nexport const stripeTransaction = newStripe => async dispatch => {\n  const paymentIntent = await stripe.paymentIntents.create({\n    amount: 1000,\n    currency: \"usd\",\n    payment_method_types: [\"card\"],\n    receipt_email: \"george.1556@gmail.com\"\n  });\n\n  console.log(\"paymentintent: \", paymentIntent);\n  dispatch({\n    type: ADD_NEW_STRIPE_SUCCESS,\n    payload: paymentIntent\n  });\n};\n\nexport const fetchAllTransactions = () => async dispatch => {\n  dispatch({\n    type: FETCH_ALL_TRANSACTIONS_PENDING\n  });\n  try {\n    let response = await axios.get(`http://localhost:8080/transactions`);\n    dispatch({\n      type: FETCH_ALL_TRANSACTIONS_SUCCESS,\n      payload: response.data\n    });\n  } catch (err) {\n    dispatch({\n      type: FETCH_ALL_TRANSACTIONS_FAILED,\n      payload: err\n    });\n  }\n};\n\nexport const fetchTransaction = id => async dispatch => {\n  dispatch({\n    type: FETCH_TRANSACTION_PENDING\n  });\n  try {\n    let response = await axios.get(`http://localhost:8080/transactions/${id}`);\n    dispatch({\n      type: FETCH_TRANSACTION_SUCCESS,\n      payload: response.data\n    });\n  } catch (err) {\n    dispatch({\n      type: FETCH_TRANSACTION_FAILED,\n      payload: err\n    });\n  }\n};\n\n// Add new Transaction\nexport const addNewTransaction = newTransaction => async dispatch => {\n  dispatch({\n    type: ADD_NEW_TRANSACTION_PENDING\n  });\n\n  try {\n    let response = await axios.post(\n      `http://localhost:8000/transaction/{newTransaction.productId}`,\n      newTransaction\n    );\n    dispatch({\n      type: ADD_NEW_TRANSACTION_SUCCESS,\n      payload: response.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ADD_NEW_TRANSACTION_FAILED,\n      payload: err\n    });\n  }\n};\n\n// Add new PRODUCT\n// export const addNewPRODUCT = newPRODUCT => async dispatch => {\n//   dispatch({\n//     type: ADD_NEW_PRODUCT_PENDING\n//   });\n\n//   try {\n//     let response = await axios.post(\n//       `http://localhost:8000/PRODUCTs`,\n//       newPRODUCT\n//     );\n//     dispatch({\n//       type: ADD_NEW_PRODUCT_SUCCESS,\n//       payload: response.data\n//     });\n//   } catch (err) {\n//     dispatch({\n//       type: ADD_NEW_PRODUCT_FAILED,\n//       payload: err\n//     });\n//   }\n// };\n\n// // Delete a PRODUCT\n// export const deletePRODUCT = id => async dispatch => {\n//   dispatch({\n//     type: DELETE_PRODUCT_PENDING\n//   });\n//   try {\n//     let response = await axios.delete(`http://localhost:8000/PRODUCTs/${id}`);\n//     dispatch({\n//       type: DELETE_PRODUCT_SUCCESS,\n//       payload: response.data\n//     });\n//   } catch (err) {\n//     dispatch({\n//       type: DELETE_PRODUCT_FAILED,\n//       payload: err\n//     });\n//   }\n// };\n\n// // Update PRODUCT\n// export const updatePRODUCT = (updatePRODUCT, id) => async dispatch => {\n//   dispatch({\n//     type: UPDATE_PRODUCT_PENDING\n//   });\n\n//   try {\n//     let response = await axios.patch(\n//       `http://localhost:8000/PRODUCTs/${id}`,\n//       updatePRODUCT\n//     );\n//     dispatch({\n//       type: UPDATE_PRODUCT_SUCCESS,\n//       payload: response.data\n//     });\n//   } catch (err) {\n//     dispatch({\n//       type: UPDATE_PRODUCT_FAILED,\n//       payload: err\n//     });\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}