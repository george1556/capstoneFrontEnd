{"ast":null,"code":"'use strict';\n/**\n * StripeError is the base error from which all other more specific Stripe errors derive.\n * Specifically for errors returned from Stripe's REST API.\n */\n\nclass StripeError extends Error {\n  constructor(raw = {}) {\n    super(raw.message);\n    this.type = this.constructor.name;\n    this.raw = raw;\n    this.rawType = raw.type;\n    this.code = raw.code;\n    this.param = raw.param;\n    this.detail = raw.detail;\n    this.headers = raw.headers;\n    this.requestId = raw.requestId;\n    this.statusCode = raw.statusCode;\n    this.message = raw.message;\n    this.charge = raw.charge;\n    this.decline_code = raw.decline_code;\n    this.payment_intent = raw.payment_intent;\n    this.payment_method = raw.payment_method;\n    this.setup_intent = raw.setup_intent;\n    this.source = raw.source;\n  }\n  /**\n   * Helper factory which takes raw stripe errors and outputs wrapping instances\n   */\n\n\n  static generate(rawStripeError) {\n    switch (rawStripeError.type) {\n      case 'card_error':\n        return new StripeCardError(rawStripeError);\n\n      case 'invalid_request_error':\n        return new StripeInvalidRequestError(rawStripeError);\n\n      case 'api_error':\n        return new StripeAPIError(rawStripeError);\n\n      case 'idempotency_error':\n        return new StripeIdempotencyError(rawStripeError);\n\n      case 'invalid_grant':\n        return new StripeInvalidGrantError(rawStripeError);\n\n      default:\n        return new GenericError('Generic', 'Unknown Error');\n    }\n  }\n\n} // Specific Stripe Error types:\n\n/**\n * CardError is raised when a user enters a card that can't be charged for\n * some reason.\n */\n\n\nclass StripeCardError extends StripeError {}\n/**\n * InvalidRequestError is raised when a request is initiated with invalid\n * parameters.\n */\n\n\nclass StripeInvalidRequestError extends StripeError {}\n/**\n * APIError is a generic error that may be raised in cases where none of the\n * other named errors cover the problem. It could also be raised in the case\n * that a new error has been introduced in the API, but this version of the\n * Node.JS SDK doesn't know how to handle it.\n */\n\n\nclass StripeAPIError extends StripeError {}\n/**\n * AuthenticationError is raised when invalid credentials are used to connect\n * to Stripe's servers.\n */\n\n\nclass StripeAuthenticationError extends StripeError {}\n/**\n * PermissionError is raised in cases where access was attempted on a resource\n * that wasn't allowed.\n */\n\n\nclass StripePermissionError extends StripeError {}\n/**\n * RateLimitError is raised in cases where an account is putting too much load\n * on Stripe's API servers (usually by performing too many requests). Please\n * back off on request rate.\n */\n\n\nclass StripeRateLimitError extends StripeError {}\n/**\n * StripeConnectionError is raised in the event that the SDK can't connect to\n * Stripe's servers. That can be for a variety of different reasons from a\n * downed network to a bad TLS certificate.\n */\n\n\nclass StripeConnectionError extends StripeError {}\n/**\n * SignatureVerificationError is raised when the signature verification for a\n * webhook fails\n */\n\n\nclass StripeSignatureVerificationError extends StripeError {}\n/**\n * IdempotencyError is raised in cases where an idempotency key was used\n * improperly.\n */\n\n\nclass StripeIdempotencyError extends StripeError {}\n/**\n * InvalidGrantError is raised when a specified code doesn't exist, is\n * expired, has been used, or doesn't belong to you; a refresh token doesn't\n * exist, or doesn't belong to you; or if an API key's mode (live or test)\n * doesn't match the mode of a code or refresh token.\n */\n\n\nclass StripeInvalidGrantError extends StripeError {}\n\nmodule.exports.StripeError = StripeError;\nmodule.exports.StripeCardError = StripeCardError;\nmodule.exports.StripeInvalidRequestError = StripeInvalidRequestError;\nmodule.exports.StripeAPIError = StripeAPIError;\nmodule.exports.StripeAuthenticationError = StripeAuthenticationError;\nmodule.exports.StripePermissionError = StripePermissionError;\nmodule.exports.StripeRateLimitError = StripeRateLimitError;\nmodule.exports.StripeConnectionError = StripeConnectionError;\nmodule.exports.StripeSignatureVerificationError = StripeSignatureVerificationError;\nmodule.exports.StripeIdempotencyError = StripeIdempotencyError;\nmodule.exports.StripeInvalidGrantError = StripeInvalidGrantError;","map":{"version":3,"sources":["/Users/george/Desktop/h2studiofrontend/node_modules/stripe/lib/Error.js"],"names":["StripeError","Error","constructor","raw","message","type","name","rawType","code","param","detail","headers","requestId","statusCode","charge","decline_code","payment_intent","payment_method","setup_intent","source","generate","rawStripeError","StripeCardError","StripeInvalidRequestError","StripeAPIError","StripeIdempotencyError","StripeInvalidGrantError","GenericError","StripeAuthenticationError","StripePermissionError","StripeRateLimitError","StripeConnectionError","StripeSignatureVerificationError","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * StripeError is the base error from which all other more specific Stripe errors derive.\n * Specifically for errors returned from Stripe's REST API.\n */\nclass StripeError extends Error {\n  constructor(raw = {}) {\n    super(raw.message);\n    this.type = this.constructor.name;\n\n    this.raw = raw;\n    this.rawType = raw.type;\n    this.code = raw.code;\n    this.param = raw.param;\n    this.detail = raw.detail;\n    this.headers = raw.headers;\n    this.requestId = raw.requestId;\n    this.statusCode = raw.statusCode;\n    this.message = raw.message;\n\n    this.charge = raw.charge;\n    this.decline_code = raw.decline_code;\n    this.payment_intent = raw.payment_intent;\n    this.payment_method = raw.payment_method;\n    this.setup_intent = raw.setup_intent;\n    this.source = raw.source;\n  }\n\n  /**\n   * Helper factory which takes raw stripe errors and outputs wrapping instances\n   */\n  static generate(rawStripeError) {\n    switch (rawStripeError.type) {\n      case 'card_error':\n        return new StripeCardError(rawStripeError);\n      case 'invalid_request_error':\n        return new StripeInvalidRequestError(rawStripeError);\n      case 'api_error':\n        return new StripeAPIError(rawStripeError);\n      case 'idempotency_error':\n        return new StripeIdempotencyError(rawStripeError);\n      case 'invalid_grant':\n        return new StripeInvalidGrantError(rawStripeError);\n      default:\n        return new GenericError('Generic', 'Unknown Error');\n    }\n  }\n}\n\n// Specific Stripe Error types:\n\n/**\n * CardError is raised when a user enters a card that can't be charged for\n * some reason.\n */\nclass StripeCardError extends StripeError {}\n\n/**\n * InvalidRequestError is raised when a request is initiated with invalid\n * parameters.\n */\nclass StripeInvalidRequestError extends StripeError {}\n\n/**\n * APIError is a generic error that may be raised in cases where none of the\n * other named errors cover the problem. It could also be raised in the case\n * that a new error has been introduced in the API, but this version of the\n * Node.JS SDK doesn't know how to handle it.\n */\nclass StripeAPIError extends StripeError {}\n\n/**\n * AuthenticationError is raised when invalid credentials are used to connect\n * to Stripe's servers.\n */\nclass StripeAuthenticationError extends StripeError {}\n\n/**\n * PermissionError is raised in cases where access was attempted on a resource\n * that wasn't allowed.\n */\nclass StripePermissionError extends StripeError {}\n\n/**\n * RateLimitError is raised in cases where an account is putting too much load\n * on Stripe's API servers (usually by performing too many requests). Please\n * back off on request rate.\n */\nclass StripeRateLimitError extends StripeError {}\n\n/**\n * StripeConnectionError is raised in the event that the SDK can't connect to\n * Stripe's servers. That can be for a variety of different reasons from a\n * downed network to a bad TLS certificate.\n */\nclass StripeConnectionError extends StripeError {}\n\n/**\n * SignatureVerificationError is raised when the signature verification for a\n * webhook fails\n */\nclass StripeSignatureVerificationError extends StripeError {}\n\n/**\n * IdempotencyError is raised in cases where an idempotency key was used\n * improperly.\n */\nclass StripeIdempotencyError extends StripeError {}\n\n/**\n * InvalidGrantError is raised when a specified code doesn't exist, is\n * expired, has been used, or doesn't belong to you; a refresh token doesn't\n * exist, or doesn't belong to you; or if an API key's mode (live or test)\n * doesn't match the mode of a code or refresh token.\n */\nclass StripeInvalidGrantError extends StripeError {}\n\nmodule.exports.StripeError = StripeError;\nmodule.exports.StripeCardError = StripeCardError;\nmodule.exports.StripeInvalidRequestError = StripeInvalidRequestError;\nmodule.exports.StripeAPIError = StripeAPIError;\nmodule.exports.StripeAuthenticationError = StripeAuthenticationError;\nmodule.exports.StripePermissionError = StripePermissionError;\nmodule.exports.StripeRateLimitError = StripeRateLimitError;\nmodule.exports.StripeConnectionError = StripeConnectionError;\nmodule.exports.StripeSignatureVerificationError = StripeSignatureVerificationError;\nmodule.exports.StripeIdempotencyError = StripeIdempotencyError;\nmodule.exports.StripeInvalidGrantError = StripeInvalidGrantError;\n"]},"metadata":{},"sourceType":"script"}