{"ast":null,"code":"'use strict';\n\nconst resources = require('./resources');\n\nconst DEFAULT_HOST = 'api.stripe.com';\nconst DEFAULT_PORT = '443';\nconst DEFAULT_BASE_PATH = '/v1/';\nconst DEFAULT_API_VERSION = null;\nconst DEFAULT_TIMEOUT = 80000;\nStripe.PACKAGE_VERSION = require('../package.json').version;\nStripe.USER_AGENT = {\n  bindings_version: Stripe.PACKAGE_VERSION,\n  lang: 'node',\n  lang_version: process.version,\n  platform: process.platform,\n  publisher: 'stripe',\n  uname: null,\n  typescript: false\n};\nStripe.USER_AGENT_SERIALIZED = null;\nconst MAX_NETWORK_RETRY_DELAY_SEC = 2;\nconst INITIAL_NETWORK_RETRY_DELAY_SEC = 0.5;\nconst APP_INFO_PROPERTIES = ['name', 'version', 'url', 'partner_id'];\nconst ALLOWED_CONFIG_PROPERTIES = ['apiVersion', 'typescript', 'maxNetworkRetries', 'httpAgent', 'timeout', 'host', 'port', 'protocol', 'telemetry', 'appInfo'];\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst utils = require('./utils');\n\nconst {\n  emitWarning\n} = utils;\nStripe.StripeResource = require('./StripeResource');\nStripe.resources = resources;\n\nfunction Stripe(key, config = {}) {\n  if (!(this instanceof Stripe)) {\n    return new Stripe(key, config);\n  }\n\n  const props = this._getPropsFromConfig(config);\n\n  Object.defineProperty(this, '_emitter', {\n    value: new EventEmitter(),\n    enumerable: false,\n    configurable: false,\n    writable: false\n  });\n  this.on = this._emitter.on.bind(this._emitter);\n  this.once = this._emitter.once.bind(this._emitter);\n  this.off = this._emitter.removeListener.bind(this._emitter);\n  this._api = {\n    auth: null,\n    host: props.host || DEFAULT_HOST,\n    port: props.port || DEFAULT_PORT,\n    protocol: props.protocol || 'https',\n    basePath: DEFAULT_BASE_PATH,\n    version: props.apiVersion || DEFAULT_API_VERSION,\n    timeout: utils.validateInteger('timeout', props.timeout, DEFAULT_TIMEOUT),\n    maxNetworkRetries: utils.validateInteger('maxNetworkRetries', props.maxNetworkRetries, 0),\n    agent: props.httpAgent || null,\n    dev: false\n  };\n  const typescript = props.typescript || false;\n\n  if (typescript !== Stripe.USER_AGENT.typescript) {\n    // The mutation here is uncomfortable, but likely fastest;\n    // serializing the user agent involves shelling out to the system,\n    // and given some users may instantiate the library many times without switching between TS and non-TS,\n    // we only want to incur the performance hit when that actually happens.\n    Stripe.USER_AGENT_SERIALIZED = null;\n    Stripe.USER_AGENT.typescript = typescript;\n  }\n\n  if (props.appInfo) {\n    this._setAppInfo(props.appInfo);\n  }\n\n  this._prepResources();\n\n  this._setApiKey(key);\n\n  this.errors = require('./Error');\n  this.webhooks = require('./Webhooks');\n  this._prevRequestMetrics = [];\n  this._enableTelemetry = props.telemetry !== false;\n}\n\nStripe.errors = require('./Error');\nStripe.webhooks = require('./Webhooks');\nStripe.prototype = {\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   host: 'example.com',\n   *   port: '8080',\n   *   protocol: 'http',\n   * });\n   *\n   */\n  setHost(host, port, protocol) {\n    emitWarning('`setHost` is deprecated. Use the `host` config option instead.');\n\n    this._setApiField('host', host);\n\n    if (port) {\n      this.setPort(port);\n    }\n\n    if (protocol) {\n      this.setProtocol(protocol);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   protocol: 'http',\n   * });\n   *\n   */\n  setProtocol(protocol) {\n    emitWarning('`setProtocol` is deprecated. Use the `protocol` config option instead.');\n\n    this._setApiField('protocol', protocol.toLowerCase());\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   port: 3000,\n   * });\n   *\n   */\n  setPort(port) {\n    emitWarning('`setPort` is deprecated. Use the `port` config option instead.');\n\n    this._setApiField('port', port);\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   apiVersion: API_VERSION,\n   * });\n   *\n   */\n  setApiVersion(version) {\n    emitWarning('`setApiVersion` is deprecated. Use the `apiVersion` config or request option instead.');\n\n    if (version) {\n      this._setApiField('version', version);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY);\n   *\n   * Or, for Stripe Connect, use `stripeAccount` instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   stripeAccount: 'acct_...',\n   * });\n   *\n   * Or, to use a different apiKey on a given request:\n   *\n   * stripe.customers.create(params, {apiKey: 'sk_test_...'});\n   */\n  setApiKey(key) {\n    emitWarning('`setApiKey` is deprecated. Use the `apiKey` request option instead.');\n\n    this._setApiKey(key);\n  },\n\n  /**\n   * @private\n   */\n  _setApiKey(key) {\n    if (key) {\n      this._setApiField('auth', `Bearer ${key}`);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   timeout: TIMEOUT_MS,\n   * });\n   */\n  setTimeout(timeout) {\n    emitWarning('`setTimeout` is deprecated. Use the `timeout` config or request option instead.');\n\n    this._setApiField('timeout', timeout == null ? DEFAULT_TIMEOUT : timeout);\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   appInfo: {\n   *     name: 'MyPlugin',\n   *     version: '1.4.2',\n   *     url: 'https://myplugin.com',\n   *     partner_id: '1234',\n   *   },\n   * });\n   */\n  setAppInfo(info) {\n    emitWarning('`setAppInfo` is deprecated. Use the `appInfo` config option instead.');\n\n    this._setAppInfo(info);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setAppInfo(info) {\n    if (info && typeof info !== 'object') {\n      throw new Error('AppInfo must be an object.');\n    }\n\n    if (info && !info.name) {\n      throw new Error('AppInfo.name is required');\n    }\n\n    info = info || {};\n    const appInfo = APP_INFO_PROPERTIES.reduce((accum, prop) => {\n      if (typeof info[prop] == 'string') {\n        accum = accum || {};\n        accum[prop] = info[prop];\n      }\n\n      return accum;\n    }, undefined); // Kill the cached UA string because it may no longer be valid\n\n    Stripe.USER_AGENT_SERIALIZED = undefined;\n    this._appInfo = appInfo;\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const ProxyAgent = require('https-proxy-agent');\n   * const stripe = new Stripe(API_KEY, {\n   *   httpAgent: new ProxyAgent(process.env.http_proxy),\n   * });\n   *\n   */\n  setHttpAgent(agent) {\n    emitWarning('`setHttpAgent` is deprecated. Use the `httpAgent` config option instead.');\n\n    this._setApiField('agent', agent);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setApiField(key, value) {\n    this._api[key] = value;\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getApiField(key) {\n    return this._api[key];\n  },\n\n  setClientId(clientId) {\n    this._clientId = clientId;\n  },\n\n  getClientId() {\n    return this._clientId;\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getConstant: c => {\n    switch (c) {\n      case 'DEFAULT_HOST':\n        return DEFAULT_HOST;\n\n      case 'DEFAULT_PORT':\n        return DEFAULT_PORT;\n\n      case 'DEFAULT_BASE_PATH':\n        return DEFAULT_BASE_PATH;\n\n      case 'DEFAULT_API_VERSION':\n        return DEFAULT_API_VERSION;\n\n      case 'DEFAULT_TIMEOUT':\n        return DEFAULT_TIMEOUT;\n\n      case 'MAX_NETWORK_RETRY_DELAY_SEC':\n        return MAX_NETWORK_RETRY_DELAY_SEC;\n\n      case 'INITIAL_NETWORK_RETRY_DELAY_SEC':\n        return INITIAL_NETWORK_RETRY_DELAY_SEC;\n    }\n\n    return Stripe[c];\n  },\n\n  getMaxNetworkRetries() {\n    return this.getApiField('maxNetworkRetries');\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   maxNetworkRetries: 2,\n   * });\n   *\n   */\n  setMaxNetworkRetries(maxNetworkRetries) {\n    this._setApiNumberField('maxNetworkRetries', maxNetworkRetries);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setApiNumberField(prop, n, defaultVal) {\n    const val = utils.validateInteger(prop, n, defaultVal);\n\n    this._setApiField(prop, val);\n  },\n\n  getMaxNetworkRetryDelay() {\n    return MAX_NETWORK_RETRY_DELAY_SEC;\n  },\n\n  getInitialNetworkRetryDelay() {\n    return INITIAL_NETWORK_RETRY_DELAY_SEC;\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   *\n   * Gets a JSON version of a User-Agent and uses a cached version for a slight\n   * speed advantage.\n   */\n  getClientUserAgent(cb) {\n    if (Stripe.USER_AGENT_SERIALIZED) {\n      return cb(Stripe.USER_AGENT_SERIALIZED);\n    }\n\n    this.getClientUserAgentSeeded(Stripe.USER_AGENT, cua => {\n      Stripe.USER_AGENT_SERIALIZED = cua;\n      cb(Stripe.USER_AGENT_SERIALIZED);\n    });\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   *\n   * Gets a JSON version of a User-Agent by encoding a seeded object and\n   * fetching a uname from the system.\n   */\n  getClientUserAgentSeeded(seed, cb) {\n    utils.safeExec('uname -a', (err, uname) => {\n      const userAgent = {};\n\n      for (const field in seed) {\n        userAgent[field] = encodeURIComponent(seed[field]);\n      } // URI-encode in case there are unusual characters in the system's uname.\n\n\n      userAgent.uname = encodeURIComponent(uname || 'UNKNOWN');\n\n      if (this._appInfo) {\n        userAgent.application = this._appInfo;\n      }\n\n      cb(JSON.stringify(userAgent));\n    });\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getAppInfoAsString() {\n    if (!this._appInfo) {\n      return '';\n    }\n\n    let formatted = this._appInfo.name;\n\n    if (this._appInfo.version) {\n      formatted += `/${this._appInfo.version}`;\n    }\n\n    if (this._appInfo.url) {\n      formatted += ` (${this._appInfo.url})`;\n    }\n\n    return formatted;\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   telemetry: false,\n   * });\n   *\n   */\n  setTelemetryEnabled(enableTelemetry) {\n    emitWarning('`setTelemetryEnabled` is deprecated. Use the `telemetry` config option instead.');\n    this._enableTelemetry = enableTelemetry;\n  },\n\n  getTelemetryEnabled() {\n    return this._enableTelemetry;\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _prepResources() {\n    for (const name in resources) {\n      this[utils.pascalToCamelCase(name)] = new resources[name](this);\n    }\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _getPropsFromConfig(config) {\n    // If config is null or undefined, just bail early with no props\n    if (!config) {\n      return {};\n    } // config can be an object or a string\n\n\n    const isString = typeof config === 'string';\n    const isObject = config === Object(config) && !Array.isArray(config);\n\n    if (!isObject && !isString) {\n      throw new Error('Config must either be an object or a string');\n    } // If config is a string, we assume the old behavior of passing in a string representation of the api version\n\n\n    if (isString) {\n      return {\n        apiVersion: config\n      };\n    } // If config is an object, we assume the new behavior and make sure it doesn't contain any unexpected values\n\n\n    const values = Object.keys(config).filter(value => !ALLOWED_CONFIG_PROPERTIES.includes(value));\n\n    if (values.length > 0) {\n      throw new Error(`Config object may only contain the following: ${ALLOWED_CONFIG_PROPERTIES.join(', ')}`);\n    }\n\n    return config;\n  }\n\n};\nmodule.exports = Stripe; // expose constructor as a named property to enable mocking with Sinon.JS\n\nmodule.exports.Stripe = Stripe; // Allow use with the TypeScript compiler without `esModuleInterop`.\n// We may also want to add `Object.defineProperty(exports, \"__esModule\", {value: true});` in the future, so that Babel users will use the `default` version.\n\nmodule.exports.default = Stripe;","map":{"version":3,"sources":["/Users/george/Desktop/h2studiofrontend/node_modules/stripe/lib/stripe.js"],"names":["resources","require","DEFAULT_HOST","DEFAULT_PORT","DEFAULT_BASE_PATH","DEFAULT_API_VERSION","DEFAULT_TIMEOUT","Stripe","PACKAGE_VERSION","version","USER_AGENT","bindings_version","lang","lang_version","process","platform","publisher","uname","typescript","USER_AGENT_SERIALIZED","MAX_NETWORK_RETRY_DELAY_SEC","INITIAL_NETWORK_RETRY_DELAY_SEC","APP_INFO_PROPERTIES","ALLOWED_CONFIG_PROPERTIES","EventEmitter","utils","emitWarning","StripeResource","key","config","props","_getPropsFromConfig","Object","defineProperty","value","enumerable","configurable","writable","on","_emitter","bind","once","off","removeListener","_api","auth","host","port","protocol","basePath","apiVersion","timeout","validateInteger","maxNetworkRetries","agent","httpAgent","dev","appInfo","_setAppInfo","_prepResources","_setApiKey","errors","webhooks","_prevRequestMetrics","_enableTelemetry","telemetry","prototype","setHost","_setApiField","setPort","setProtocol","toLowerCase","setApiVersion","setApiKey","setTimeout","setAppInfo","info","Error","name","reduce","accum","prop","undefined","_appInfo","setHttpAgent","getApiField","setClientId","clientId","_clientId","getClientId","getConstant","c","getMaxNetworkRetries","setMaxNetworkRetries","_setApiNumberField","n","defaultVal","val","getMaxNetworkRetryDelay","getInitialNetworkRetryDelay","getClientUserAgent","cb","getClientUserAgentSeeded","cua","seed","safeExec","err","userAgent","field","encodeURIComponent","application","JSON","stringify","getAppInfoAsString","formatted","url","setTelemetryEnabled","enableTelemetry","getTelemetryEnabled","pascalToCamelCase","isString","isObject","Array","isArray","values","keys","filter","includes","length","join","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst resources = require('./resources');\n\nconst DEFAULT_HOST = 'api.stripe.com';\nconst DEFAULT_PORT = '443';\nconst DEFAULT_BASE_PATH = '/v1/';\nconst DEFAULT_API_VERSION = null;\n\nconst DEFAULT_TIMEOUT = 80000;\n\nStripe.PACKAGE_VERSION = require('../package.json').version;\n\nStripe.USER_AGENT = {\n  bindings_version: Stripe.PACKAGE_VERSION,\n  lang: 'node',\n  lang_version: process.version,\n  platform: process.platform,\n  publisher: 'stripe',\n  uname: null,\n  typescript: false,\n};\n\nStripe.USER_AGENT_SERIALIZED = null;\n\nconst MAX_NETWORK_RETRY_DELAY_SEC = 2;\nconst INITIAL_NETWORK_RETRY_DELAY_SEC = 0.5;\n\nconst APP_INFO_PROPERTIES = ['name', 'version', 'url', 'partner_id'];\nconst ALLOWED_CONFIG_PROPERTIES = [\n  'apiVersion',\n  'typescript',\n  'maxNetworkRetries',\n  'httpAgent',\n  'timeout',\n  'host',\n  'port',\n  'protocol',\n  'telemetry',\n  'appInfo',\n];\n\nconst EventEmitter = require('events').EventEmitter;\nconst utils = require('./utils');\nconst {emitWarning} = utils;\n\nStripe.StripeResource = require('./StripeResource');\nStripe.resources = resources;\n\nfunction Stripe(key, config = {}) {\n  if (!(this instanceof Stripe)) {\n    return new Stripe(key, config);\n  }\n\n  const props = this._getPropsFromConfig(config);\n\n  Object.defineProperty(this, '_emitter', {\n    value: new EventEmitter(),\n    enumerable: false,\n    configurable: false,\n    writable: false,\n  });\n\n  this.on = this._emitter.on.bind(this._emitter);\n  this.once = this._emitter.once.bind(this._emitter);\n  this.off = this._emitter.removeListener.bind(this._emitter);\n\n  this._api = {\n    auth: null,\n    host: props.host || DEFAULT_HOST,\n    port: props.port || DEFAULT_PORT,\n    protocol: props.protocol || 'https',\n    basePath: DEFAULT_BASE_PATH,\n    version: props.apiVersion || DEFAULT_API_VERSION,\n    timeout: utils.validateInteger('timeout', props.timeout, DEFAULT_TIMEOUT),\n    maxNetworkRetries: utils.validateInteger(\n      'maxNetworkRetries',\n      props.maxNetworkRetries,\n      0\n    ),\n    agent: props.httpAgent || null,\n    dev: false,\n  };\n\n  const typescript = props.typescript || false;\n  if (typescript !== Stripe.USER_AGENT.typescript) {\n    // The mutation here is uncomfortable, but likely fastest;\n    // serializing the user agent involves shelling out to the system,\n    // and given some users may instantiate the library many times without switching between TS and non-TS,\n    // we only want to incur the performance hit when that actually happens.\n    Stripe.USER_AGENT_SERIALIZED = null;\n    Stripe.USER_AGENT.typescript = typescript;\n  }\n\n  if (props.appInfo) {\n    this._setAppInfo(props.appInfo);\n  }\n\n  this._prepResources();\n  this._setApiKey(key);\n\n  this.errors = require('./Error');\n  this.webhooks = require('./Webhooks');\n\n  this._prevRequestMetrics = [];\n  this._enableTelemetry = props.telemetry !== false;\n}\n\nStripe.errors = require('./Error');\nStripe.webhooks = require('./Webhooks');\n\nStripe.prototype = {\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   host: 'example.com',\n   *   port: '8080',\n   *   protocol: 'http',\n   * });\n   *\n   */\n  setHost(host, port, protocol) {\n    emitWarning(\n      '`setHost` is deprecated. Use the `host` config option instead.'\n    );\n    this._setApiField('host', host);\n    if (port) {\n      this.setPort(port);\n    }\n    if (protocol) {\n      this.setProtocol(protocol);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   protocol: 'http',\n   * });\n   *\n   */\n  setProtocol(protocol) {\n    emitWarning(\n      '`setProtocol` is deprecated. Use the `protocol` config option instead.'\n    );\n    this._setApiField('protocol', protocol.toLowerCase());\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   port: 3000,\n   * });\n   *\n   */\n  setPort(port) {\n    emitWarning(\n      '`setPort` is deprecated. Use the `port` config option instead.'\n    );\n    this._setApiField('port', port);\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   apiVersion: API_VERSION,\n   * });\n   *\n   */\n  setApiVersion(version) {\n    emitWarning(\n      '`setApiVersion` is deprecated. Use the `apiVersion` config or request option instead.'\n    );\n    if (version) {\n      this._setApiField('version', version);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY);\n   *\n   * Or, for Stripe Connect, use `stripeAccount` instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   stripeAccount: 'acct_...',\n   * });\n   *\n   * Or, to use a different apiKey on a given request:\n   *\n   * stripe.customers.create(params, {apiKey: 'sk_test_...'});\n   */\n  setApiKey(key) {\n    emitWarning(\n      '`setApiKey` is deprecated. Use the `apiKey` request option instead.'\n    );\n    this._setApiKey(key);\n  },\n\n  /**\n   * @private\n   */\n  _setApiKey(key) {\n    if (key) {\n      this._setApiField('auth', `Bearer ${key}`);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   timeout: TIMEOUT_MS,\n   * });\n   */\n  setTimeout(timeout) {\n    emitWarning(\n      '`setTimeout` is deprecated. Use the `timeout` config or request option instead.'\n    );\n    this._setApiField('timeout', timeout == null ? DEFAULT_TIMEOUT : timeout);\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   appInfo: {\n   *     name: 'MyPlugin',\n   *     version: '1.4.2',\n   *     url: 'https://myplugin.com',\n   *     partner_id: '1234',\n   *   },\n   * });\n   */\n  setAppInfo(info) {\n    emitWarning(\n      '`setAppInfo` is deprecated. Use the `appInfo` config option instead.'\n    );\n    this._setAppInfo(info);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setAppInfo(info) {\n    if (info && typeof info !== 'object') {\n      throw new Error('AppInfo must be an object.');\n    }\n\n    if (info && !info.name) {\n      throw new Error('AppInfo.name is required');\n    }\n\n    info = info || {};\n\n    const appInfo = APP_INFO_PROPERTIES.reduce((accum, prop) => {\n      if (typeof info[prop] == 'string') {\n        accum = accum || {};\n\n        accum[prop] = info[prop];\n      }\n\n      return accum;\n    }, undefined);\n\n    // Kill the cached UA string because it may no longer be valid\n    Stripe.USER_AGENT_SERIALIZED = undefined;\n\n    this._appInfo = appInfo;\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const ProxyAgent = require('https-proxy-agent');\n   * const stripe = new Stripe(API_KEY, {\n   *   httpAgent: new ProxyAgent(process.env.http_proxy),\n   * });\n   *\n   */\n  setHttpAgent(agent) {\n    emitWarning(\n      '`setHttpAgent` is deprecated. Use the `httpAgent` config option instead.'\n    );\n    this._setApiField('agent', agent);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setApiField(key, value) {\n    this._api[key] = value;\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getApiField(key) {\n    return this._api[key];\n  },\n\n  setClientId(clientId) {\n    this._clientId = clientId;\n  },\n\n  getClientId() {\n    return this._clientId;\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getConstant: (c) => {\n    switch (c) {\n      case 'DEFAULT_HOST':\n        return DEFAULT_HOST;\n      case 'DEFAULT_PORT':\n        return DEFAULT_PORT;\n      case 'DEFAULT_BASE_PATH':\n        return DEFAULT_BASE_PATH;\n      case 'DEFAULT_API_VERSION':\n        return DEFAULT_API_VERSION;\n      case 'DEFAULT_TIMEOUT':\n        return DEFAULT_TIMEOUT;\n      case 'MAX_NETWORK_RETRY_DELAY_SEC':\n        return MAX_NETWORK_RETRY_DELAY_SEC;\n      case 'INITIAL_NETWORK_RETRY_DELAY_SEC':\n        return INITIAL_NETWORK_RETRY_DELAY_SEC;\n    }\n    return Stripe[c];\n  },\n\n  getMaxNetworkRetries() {\n    return this.getApiField('maxNetworkRetries');\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   maxNetworkRetries: 2,\n   * });\n   *\n   */\n  setMaxNetworkRetries(maxNetworkRetries) {\n    this._setApiNumberField('maxNetworkRetries', maxNetworkRetries);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setApiNumberField(prop, n, defaultVal) {\n    const val = utils.validateInteger(prop, n, defaultVal);\n\n    this._setApiField(prop, val);\n  },\n\n  getMaxNetworkRetryDelay() {\n    return MAX_NETWORK_RETRY_DELAY_SEC;\n  },\n\n  getInitialNetworkRetryDelay() {\n    return INITIAL_NETWORK_RETRY_DELAY_SEC;\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   *\n   * Gets a JSON version of a User-Agent and uses a cached version for a slight\n   * speed advantage.\n   */\n  getClientUserAgent(cb) {\n    if (Stripe.USER_AGENT_SERIALIZED) {\n      return cb(Stripe.USER_AGENT_SERIALIZED);\n    }\n    this.getClientUserAgentSeeded(Stripe.USER_AGENT, (cua) => {\n      Stripe.USER_AGENT_SERIALIZED = cua;\n      cb(Stripe.USER_AGENT_SERIALIZED);\n    });\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   *\n   * Gets a JSON version of a User-Agent by encoding a seeded object and\n   * fetching a uname from the system.\n   */\n  getClientUserAgentSeeded(seed, cb) {\n    utils.safeExec('uname -a', (err, uname) => {\n      const userAgent = {};\n      for (const field in seed) {\n        userAgent[field] = encodeURIComponent(seed[field]);\n      }\n\n      // URI-encode in case there are unusual characters in the system's uname.\n      userAgent.uname = encodeURIComponent(uname || 'UNKNOWN');\n\n      if (this._appInfo) {\n        userAgent.application = this._appInfo;\n      }\n\n      cb(JSON.stringify(userAgent));\n    });\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getAppInfoAsString() {\n    if (!this._appInfo) {\n      return '';\n    }\n\n    let formatted = this._appInfo.name;\n\n    if (this._appInfo.version) {\n      formatted += `/${this._appInfo.version}`;\n    }\n\n    if (this._appInfo.url) {\n      formatted += ` (${this._appInfo.url})`;\n    }\n\n    return formatted;\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   telemetry: false,\n   * });\n   *\n   */\n  setTelemetryEnabled(enableTelemetry) {\n    emitWarning(\n      '`setTelemetryEnabled` is deprecated. Use the `telemetry` config option instead.'\n    );\n    this._enableTelemetry = enableTelemetry;\n  },\n\n  getTelemetryEnabled() {\n    return this._enableTelemetry;\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _prepResources() {\n    for (const name in resources) {\n      this[utils.pascalToCamelCase(name)] = new resources[name](this);\n    }\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _getPropsFromConfig(config) {\n    // If config is null or undefined, just bail early with no props\n    if (!config) {\n      return {};\n    }\n\n    // config can be an object or a string\n    const isString = typeof config === 'string';\n    const isObject = config === Object(config) && !Array.isArray(config);\n\n    if (!isObject && !isString) {\n      throw new Error('Config must either be an object or a string');\n    }\n\n    // If config is a string, we assume the old behavior of passing in a string representation of the api version\n    if (isString) {\n      return {\n        apiVersion: config,\n      };\n    }\n\n    // If config is an object, we assume the new behavior and make sure it doesn't contain any unexpected values\n    const values = Object.keys(config).filter(\n      (value) => !ALLOWED_CONFIG_PROPERTIES.includes(value)\n    );\n\n    if (values.length > 0) {\n      throw new Error(\n        `Config object may only contain the following: ${ALLOWED_CONFIG_PROPERTIES.join(\n          ', '\n        )}`\n      );\n    }\n\n    return config;\n  },\n};\n\nmodule.exports = Stripe;\n\n// expose constructor as a named property to enable mocking with Sinon.JS\nmodule.exports.Stripe = Stripe;\n\n// Allow use with the TypeScript compiler without `esModuleInterop`.\n// We may also want to add `Object.defineProperty(exports, \"__esModule\", {value: true});` in the future, so that Babel users will use the `default` version.\nmodule.exports.default = Stripe;\n"]},"metadata":{},"sourceType":"script"}