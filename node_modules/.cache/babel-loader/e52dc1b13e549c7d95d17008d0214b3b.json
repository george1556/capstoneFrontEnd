{"ast":null,"code":"'use strict';\n\nconst http = require('http');\n\nconst https = require('https');\n\nconst path = require('path');\n\nconst utils = require('./utils');\n\nconst {\n  StripeConnectionError,\n  StripeAuthenticationError,\n  StripePermissionError,\n  StripeRateLimitError,\n  StripeError,\n  StripeAPIError\n} = require('./Error');\n\nconst defaultHttpAgent = new http.Agent({\n  keepAlive: true\n});\nconst defaultHttpsAgent = new https.Agent({\n  keepAlive: true\n}); // Provide extension mechanism for Stripe Resource Sub-Classes\n\nStripeResource.extend = utils.protoExtend; // Expose method-creator & prepared (basic) methods\n\nStripeResource.method = require('./StripeMethod');\nStripeResource.BASIC_METHODS = require('./StripeMethod.basic');\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\nconst MAX_RETRY_AFTER_WAIT = 60;\n/**\n * Encapsulates request logic for a Stripe Resource\n */\n\nfunction StripeResource(stripe, deprecatedUrlData) {\n  this._stripe = stripe;\n\n  if (deprecatedUrlData) {\n    throw new Error('Support for curried url params was dropped in stripe-node v7.0.0. Instead, pass two ids.');\n  }\n\n  this.basePath = utils.makeURLInterpolator(this.basePath || stripe.getApiField('basePath'));\n  this.resourcePath = this.path;\n  this.path = utils.makeURLInterpolator(this.path);\n\n  if (this.includeBasic) {\n    this.includeBasic.forEach(function (methodName) {\n      this[methodName] = StripeResource.BASIC_METHODS[methodName];\n    }, this);\n  }\n\n  this.initialize(...arguments);\n}\n\nStripeResource.prototype = {\n  path: '',\n  // Methods that don't use the API's default '/v1' path can override it with this setting.\n  basePath: null,\n\n  initialize() {},\n\n  // Function to override the default data processor. This allows full control\n  // over how a StripeResource's request data will get converted into an HTTP\n  // body. This is useful for non-standard HTTP requests. The function should\n  // take method name, data, and headers as arguments.\n  requestDataProcessor: null,\n  // Function to add a validation checks before sending the request, errors should\n  // be thrown, and they will be passed to the callback/promise.\n  validateRequest: null,\n\n  createFullPath(commandPath, urlData) {\n    return path.join(this.basePath(urlData), this.path(urlData), typeof commandPath == 'function' ? commandPath(urlData) : commandPath).replace(/\\\\/g, '/'); // ugly workaround for Windows\n  },\n\n  // Creates a relative resource path with symbols left in (unlike\n  // createFullPath which takes some data to replace them with). For example it\n  // might produce: /invoices/{id}\n  createResourcePathWithSymbols(pathWithSymbols) {\n    return `/${path.join(this.resourcePath, pathWithSymbols || '').replace(/\\\\/g, '/')}`; // ugly workaround for Windows\n  },\n\n  // DEPRECATED: Here for backcompat in case users relied on this.\n  wrapTimeout: utils.callbackifyPromiseWithTimeout,\n\n  _timeoutHandler(timeout, req, callback) {\n    return () => {\n      const timeoutErr = new TypeError('ETIMEDOUT');\n      timeoutErr.code = 'ETIMEDOUT';\n      req._isAborted = true;\n      req.abort();\n      callback.call(this, new StripeConnectionError({\n        message: `Request aborted due to timeout being reached (${timeout}ms)`,\n        detail: timeoutErr\n      }), null);\n    };\n  },\n\n  _responseHandler(req, callback) {\n    return res => {\n      let response = '';\n      res.setEncoding('utf8');\n      res.on('data', chunk => {\n        response += chunk;\n      });\n      res.once('end', () => {\n        const headers = res.headers || {}; // NOTE: Stripe responds with lowercase header names/keys.\n        // For convenience, make Request-Id easily accessible on\n        // lastResponse.\n\n        res.requestId = headers['request-id'];\n        const requestEndTime = Date.now();\n        const requestDurationMs = requestEndTime - req._requestStart;\n        const responseEvent = utils.removeNullish({\n          api_version: headers['stripe-version'],\n          account: headers['stripe-account'],\n          idempotency_key: headers['idempotency-key'],\n          method: req._requestEvent.method,\n          path: req._requestEvent.path,\n          status: res.statusCode,\n          request_id: res.requestId,\n          elapsed: requestDurationMs,\n          request_start_time: req._requestStart,\n          request_end_time: requestEndTime\n        });\n\n        this._stripe._emitter.emit('response', responseEvent);\n\n        try {\n          response = JSON.parse(response);\n\n          if (response.error) {\n            let err; // Convert OAuth error responses into a standard format\n            // so that the rest of the error logic can be shared\n\n            if (typeof response.error === 'string') {\n              response.error = {\n                type: response.error,\n                message: response.error_description\n              };\n            }\n\n            response.error.headers = headers;\n            response.error.statusCode = res.statusCode;\n            response.error.requestId = res.requestId;\n\n            if (res.statusCode === 401) {\n              err = new StripeAuthenticationError(response.error);\n            } else if (res.statusCode === 403) {\n              err = new StripePermissionError(response.error);\n            } else if (res.statusCode === 429) {\n              err = new StripeRateLimitError(response.error);\n            } else {\n              err = StripeError.generate(response.error);\n            }\n\n            return callback.call(this, err, null);\n          }\n        } catch (e) {\n          return callback.call(this, new StripeAPIError({\n            message: 'Invalid JSON received from the Stripe API',\n            response,\n            exception: e,\n            requestId: headers['request-id']\n          }), null);\n        }\n\n        this._recordRequestMetrics(res.requestId, requestDurationMs); // Expose res object\n\n\n        Object.defineProperty(response, 'lastResponse', {\n          enumerable: false,\n          writable: false,\n          value: res\n        });\n        callback.call(this, null, response);\n      });\n    };\n  },\n\n  _generateConnectionErrorMessage(requestRetries) {\n    return `An error occurred with our connection to Stripe.${requestRetries > 0 ? ` Request was retried ${requestRetries} times.` : ''}`;\n  },\n\n  _errorHandler(req, requestRetries, callback) {\n    return error => {\n      if (req._isAborted) {\n        // already handled\n        return;\n      }\n\n      callback.call(this, new StripeConnectionError({\n        message: this._generateConnectionErrorMessage(requestRetries),\n        detail: error\n      }), null);\n    };\n  },\n\n  // For more on when and how to retry API requests, see https://stripe.com/docs/error-handling#safely-retrying-requests-with-idempotency\n  _shouldRetry(res, numRetries, maxRetries) {\n    // Do not retry if we are out of retries.\n    if (numRetries >= maxRetries) {\n      return false;\n    } // Retry on connection error.\n\n\n    if (!res) {\n      return true;\n    } // The API may ask us not to retry (e.g., if doing so would be a no-op)\n    // or advise us to retry (e.g., in cases of lock timeouts); we defer to that.\n\n\n    if (res.headers && res.headers['stripe-should-retry'] === 'false') {\n      return false;\n    }\n\n    if (res.headers && res.headers['stripe-should-retry'] === 'true') {\n      return true;\n    } // Retry on conflict errors.\n\n\n    if (res.statusCode === 409) {\n      return true;\n    } // Retry on 500, 503, and other internal errors.\n    //\n    // Note that we expect the stripe-should-retry header to be false\n    // in most cases when a 500 is returned, since our idempotency framework\n    // would typically replay it anyway.\n\n\n    if (res.statusCode >= 500) {\n      return true;\n    }\n\n    return false;\n  },\n\n  _getSleepTimeInMS(numRetries, retryAfter = null) {\n    const initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n\n    const maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay(); // Apply exponential backoff with initialNetworkRetryDelay on the\n    // number of numRetries so far as inputs. Do not allow the number to exceed\n    // maxNetworkRetryDelay.\n\n\n    let sleepSeconds = Math.min(initialNetworkRetryDelay * Math.pow(numRetries - 1, 2), maxNetworkRetryDelay); // Apply some jitter by randomizing the value in the range of\n    // (sleepSeconds / 2) to (sleepSeconds).\n\n    sleepSeconds *= 0.5 * (1 + Math.random()); // But never sleep less than the base sleep seconds.\n\n    sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds); // And never sleep less than the time the API asks us to wait, assuming it's a reasonable ask.\n\n    if (Number.isInteger(retryAfter) && retryAfter <= MAX_RETRY_AFTER_WAIT) {\n      sleepSeconds = Math.max(sleepSeconds, retryAfter);\n    }\n\n    return sleepSeconds * 1000;\n  },\n\n  // Max retries can be set on a per request basis. Favor those over the global setting\n  _getMaxNetworkRetries(settings = {}) {\n    return settings.maxNetworkRetries && Number.isInteger(settings.maxNetworkRetries) ? settings.maxNetworkRetries : this._stripe.getMaxNetworkRetries();\n  },\n\n  _defaultIdempotencyKey(method, settings) {\n    // If this is a POST and we allow multiple retries, ensure an idempotency key.\n    const maxRetries = this._getMaxNetworkRetries(settings);\n\n    if (method === 'POST' && maxRetries > 0) {\n      return `stripe-node-retry-${utils.uuid4()}`;\n    }\n\n    return null;\n  },\n\n  _makeHeaders(auth, contentLength, apiVersion, clientUserAgent, method, userSuppliedHeaders, userSuppliedSettings) {\n    const defaultHeaders = {\n      // Use specified auth token or use default from this stripe instance:\n      Authorization: auth ? `Bearer ${auth}` : this._stripe.getApiField('auth'),\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Content-Length': contentLength,\n      'User-Agent': this._getUserAgentString(),\n      'X-Stripe-Client-User-Agent': clientUserAgent,\n      'X-Stripe-Client-Telemetry': this._getTelemetryHeader(),\n      'Stripe-Version': apiVersion,\n      'Idempotency-Key': this._defaultIdempotencyKey(method, userSuppliedSettings)\n    };\n    return Object.assign(utils.removeNullish(defaultHeaders), // If the user supplied, say 'idempotency-key', override instead of appending by ensuring caps are the same.\n    utils.normalizeHeaders(userSuppliedHeaders));\n  },\n\n  _getUserAgentString() {\n    const packageVersion = this._stripe.getConstant('PACKAGE_VERSION');\n\n    const appInfo = this._stripe._appInfo ? this._stripe.getAppInfoAsString() : '';\n    return `Stripe/v1 NodeBindings/${packageVersion} ${appInfo}`.trim();\n  },\n\n  _getTelemetryHeader() {\n    if (this._stripe.getTelemetryEnabled() && this._stripe._prevRequestMetrics.length > 0) {\n      const metrics = this._stripe._prevRequestMetrics.shift();\n\n      return JSON.stringify({\n        last_request_metrics: metrics\n      });\n    }\n  },\n\n  _recordRequestMetrics(requestId, requestDurationMs) {\n    if (this._stripe.getTelemetryEnabled() && requestId) {\n      if (this._stripe._prevRequestMetrics.length > StripeResource.MAX_BUFFERED_REQUEST_METRICS) {\n        utils.emitWarning('Request metrics buffer is full, dropping telemetry message.');\n      } else {\n        this._stripe._prevRequestMetrics.push({\n          request_id: requestId,\n          request_duration_ms: requestDurationMs\n        });\n      }\n    }\n  },\n\n  _request(method, host, path, data, auth, options = {}, callback) {\n    let requestData;\n\n    const retryRequest = (requestFn, apiVersion, headers, requestRetries, retryAfter) => {\n      return setTimeout(requestFn, this._getSleepTimeInMS(requestRetries, retryAfter), apiVersion, headers, requestRetries + 1);\n    };\n\n    const makeRequest = (apiVersion, headers, numRetries) => {\n      // timeout can be set on a per-request basis. Favor that over the global setting\n      const timeout = options.settings && Number.isInteger(options.settings.timeout) && options.settings.timeout >= 0 ? options.settings.timeout : this._stripe.getApiField('timeout');\n      const isInsecureConnection = this._stripe.getApiField('protocol') == 'http';\n\n      let agent = this._stripe.getApiField('agent');\n\n      if (agent == null) {\n        agent = isInsecureConnection ? defaultHttpAgent : defaultHttpsAgent;\n      }\n\n      const req = (isInsecureConnection ? http : https).request({\n        host: host || this._stripe.getApiField('host'),\n        port: this._stripe.getApiField('port'),\n        path,\n        method,\n        agent,\n        headers,\n        ciphers: 'DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:!MD5'\n      });\n      const requestStartTime = Date.now();\n      const requestEvent = utils.removeNullish({\n        api_version: apiVersion,\n        account: headers['Stripe-Account'],\n        idempotency_key: headers['Idempotency-Key'],\n        method,\n        path,\n        request_start_time: requestStartTime\n      });\n      const requestRetries = numRetries || 0;\n\n      const maxRetries = this._getMaxNetworkRetries(options.settings);\n\n      req._requestEvent = requestEvent;\n      req._requestStart = requestStartTime;\n\n      this._stripe._emitter.emit('request', requestEvent);\n\n      req.setTimeout(timeout, this._timeoutHandler(timeout, req, callback));\n      req.once('response', res => {\n        if (this._shouldRetry(res, requestRetries, maxRetries)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries, ((res || {}).headers || {})['retry-after']);\n        } else {\n          return this._responseHandler(req, callback)(res);\n        }\n      });\n      req.on('error', error => {\n        if (this._shouldRetry(null, requestRetries, maxRetries)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries, null);\n        } else {\n          return this._errorHandler(req, requestRetries, callback)(error);\n        }\n      });\n      req.once('socket', socket => {\n        if (socket.connecting) {\n          socket.once(isInsecureConnection ? 'connect' : 'secureConnect', () => {\n            // Send payload; we're safe:\n            req.write(requestData);\n            req.end();\n          });\n        } else {\n          // we're already connected\n          req.write(requestData);\n          req.end();\n        }\n      });\n    };\n\n    const prepareAndMakeRequest = (error, data) => {\n      if (error) {\n        return callback(error);\n      }\n\n      requestData = data;\n\n      this._stripe.getClientUserAgent(clientUserAgent => {\n        const apiVersion = this._stripe.getApiField('version');\n\n        const headers = this._makeHeaders(auth, requestData.length, apiVersion, clientUserAgent, method, options.headers, options.settings);\n\n        makeRequest(apiVersion, headers);\n      });\n    };\n\n    if (this.requestDataProcessor) {\n      this.requestDataProcessor(method, data, options.headers, prepareAndMakeRequest);\n    } else {\n      prepareAndMakeRequest(null, utils.stringifyRequestData(data || {}));\n    }\n  }\n\n};\nmodule.exports = StripeResource;","map":{"version":3,"sources":["/Users/george/Desktop/h2studiofrontend/node_modules/stripe/lib/StripeResource.js"],"names":["http","require","https","path","utils","StripeConnectionError","StripeAuthenticationError","StripePermissionError","StripeRateLimitError","StripeError","StripeAPIError","defaultHttpAgent","Agent","keepAlive","defaultHttpsAgent","StripeResource","extend","protoExtend","method","BASIC_METHODS","MAX_BUFFERED_REQUEST_METRICS","MAX_RETRY_AFTER_WAIT","stripe","deprecatedUrlData","_stripe","Error","basePath","makeURLInterpolator","getApiField","resourcePath","includeBasic","forEach","methodName","initialize","arguments","prototype","requestDataProcessor","validateRequest","createFullPath","commandPath","urlData","join","replace","createResourcePathWithSymbols","pathWithSymbols","wrapTimeout","callbackifyPromiseWithTimeout","_timeoutHandler","timeout","req","callback","timeoutErr","TypeError","code","_isAborted","abort","call","message","detail","_responseHandler","res","response","setEncoding","on","chunk","once","headers","requestId","requestEndTime","Date","now","requestDurationMs","_requestStart","responseEvent","removeNullish","api_version","account","idempotency_key","_requestEvent","status","statusCode","request_id","elapsed","request_start_time","request_end_time","_emitter","emit","JSON","parse","error","err","type","error_description","generate","e","exception","_recordRequestMetrics","Object","defineProperty","enumerable","writable","value","_generateConnectionErrorMessage","requestRetries","_errorHandler","_shouldRetry","numRetries","maxRetries","_getSleepTimeInMS","retryAfter","initialNetworkRetryDelay","getInitialNetworkRetryDelay","maxNetworkRetryDelay","getMaxNetworkRetryDelay","sleepSeconds","Math","min","pow","random","max","Number","isInteger","_getMaxNetworkRetries","settings","maxNetworkRetries","getMaxNetworkRetries","_defaultIdempotencyKey","uuid4","_makeHeaders","auth","contentLength","apiVersion","clientUserAgent","userSuppliedHeaders","userSuppliedSettings","defaultHeaders","Authorization","Accept","_getUserAgentString","_getTelemetryHeader","assign","normalizeHeaders","packageVersion","getConstant","appInfo","_appInfo","getAppInfoAsString","trim","getTelemetryEnabled","_prevRequestMetrics","length","metrics","shift","stringify","last_request_metrics","emitWarning","push","request_duration_ms","_request","host","data","options","requestData","retryRequest","requestFn","setTimeout","makeRequest","isInsecureConnection","agent","request","port","ciphers","requestStartTime","requestEvent","socket","connecting","write","end","prepareAndMakeRequest","getClientUserAgent","stringifyRequestData","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMG,KAAK,GAAGH,OAAO,CAAC,SAAD,CAArB;;AACA,MAAM;AACJI,EAAAA,qBADI;AAEJC,EAAAA,yBAFI;AAGJC,EAAAA,qBAHI;AAIJC,EAAAA,oBAJI;AAKJC,EAAAA,WALI;AAMJC,EAAAA;AANI,IAOFT,OAAO,CAAC,SAAD,CAPX;;AASA,MAAMU,gBAAgB,GAAG,IAAIX,IAAI,CAACY,KAAT,CAAe;AAACC,EAAAA,SAAS,EAAE;AAAZ,CAAf,CAAzB;AACA,MAAMC,iBAAiB,GAAG,IAAIZ,KAAK,CAACU,KAAV,CAAgB;AAACC,EAAAA,SAAS,EAAE;AAAZ,CAAhB,CAA1B,C,CAEA;;AACAE,cAAc,CAACC,MAAf,GAAwBZ,KAAK,CAACa,WAA9B,C,CAEA;;AACAF,cAAc,CAACG,MAAf,GAAwBjB,OAAO,CAAC,gBAAD,CAA/B;AACAc,cAAc,CAACI,aAAf,GAA+BlB,OAAO,CAAC,sBAAD,CAAtC;AAEAc,cAAc,CAACK,4BAAf,GAA8C,GAA9C;AACA,MAAMC,oBAAoB,GAAG,EAA7B;AAEA;;;;AAGA,SAASN,cAAT,CAAwBO,MAAxB,EAAgCC,iBAAhC,EAAmD;AACjD,OAAKC,OAAL,GAAeF,MAAf;;AACA,MAAIC,iBAAJ,EAAuB;AACrB,UAAM,IAAIE,KAAJ,CACJ,0FADI,CAAN;AAGD;;AAED,OAAKC,QAAL,GAAgBtB,KAAK,CAACuB,mBAAN,CACd,KAAKD,QAAL,IAAiBJ,MAAM,CAACM,WAAP,CAAmB,UAAnB,CADH,CAAhB;AAGA,OAAKC,YAAL,GAAoB,KAAK1B,IAAzB;AACA,OAAKA,IAAL,GAAYC,KAAK,CAACuB,mBAAN,CAA0B,KAAKxB,IAA/B,CAAZ;;AAEA,MAAI,KAAK2B,YAAT,EAAuB;AACrB,SAAKA,YAAL,CAAkBC,OAAlB,CAA0B,UAASC,UAAT,EAAqB;AAC7C,WAAKA,UAAL,IAAmBjB,cAAc,CAACI,aAAf,CAA6Ba,UAA7B,CAAnB;AACD,KAFD,EAEG,IAFH;AAGD;;AAED,OAAKC,UAAL,CAAgB,GAAGC,SAAnB;AACD;;AAEDnB,cAAc,CAACoB,SAAf,GAA2B;AACzBhC,EAAAA,IAAI,EAAE,EADmB;AAGzB;AACAuB,EAAAA,QAAQ,EAAE,IAJe;;AAMzBO,EAAAA,UAAU,GAAG,CAAE,CANU;;AAQzB;AACA;AACA;AACA;AACAG,EAAAA,oBAAoB,EAAE,IAZG;AAczB;AACA;AACAC,EAAAA,eAAe,EAAE,IAhBQ;;AAkBzBC,EAAAA,cAAc,CAACC,WAAD,EAAcC,OAAd,EAAuB;AACnC,WAAOrC,IAAI,CACRsC,IADI,CAEH,KAAKf,QAAL,CAAcc,OAAd,CAFG,EAGH,KAAKrC,IAAL,CAAUqC,OAAV,CAHG,EAIH,OAAOD,WAAP,IAAsB,UAAtB,GAAmCA,WAAW,CAACC,OAAD,CAA9C,GAA0DD,WAJvD,EAMJG,OANI,CAMI,KANJ,EAMW,GANX,CAAP,CADmC,CAOX;AACzB,GA1BwB;;AA4BzB;AACA;AACA;AACAC,EAAAA,6BAA6B,CAACC,eAAD,EAAkB;AAC7C,WAAQ,IAAGzC,IAAI,CACZsC,IADQ,CACH,KAAKZ,YADF,EACgBe,eAAe,IAAI,EADnC,EAERF,OAFQ,CAEA,KAFA,EAEO,GAFP,CAEY,EAFvB,CAD6C,CAGnB;AAC3B,GAnCwB;;AAqCzB;AACAG,EAAAA,WAAW,EAAEzC,KAAK,CAAC0C,6BAtCM;;AAwCzBC,EAAAA,eAAe,CAACC,OAAD,EAAUC,GAAV,EAAeC,QAAf,EAAyB;AACtC,WAAO,MAAM;AACX,YAAMC,UAAU,GAAG,IAAIC,SAAJ,CAAc,WAAd,CAAnB;AACAD,MAAAA,UAAU,CAACE,IAAX,GAAkB,WAAlB;AAEAJ,MAAAA,GAAG,CAACK,UAAJ,GAAiB,IAAjB;AACAL,MAAAA,GAAG,CAACM,KAAJ;AAEAL,MAAAA,QAAQ,CAACM,IAAT,CACE,IADF,EAEE,IAAInD,qBAAJ,CAA0B;AACxBoD,QAAAA,OAAO,EAAG,iDAAgDT,OAAQ,KAD1C;AAExBU,QAAAA,MAAM,EAAEP;AAFgB,OAA1B,CAFF,EAME,IANF;AAQD,KAfD;AAgBD,GAzDwB;;AA2DzBQ,EAAAA,gBAAgB,CAACV,GAAD,EAAMC,QAAN,EAAgB;AAC9B,WAAQU,GAAD,IAAS;AACd,UAAIC,QAAQ,GAAG,EAAf;AAEAD,MAAAA,GAAG,CAACE,WAAJ,CAAgB,MAAhB;AACAF,MAAAA,GAAG,CAACG,EAAJ,CAAO,MAAP,EAAgBC,KAAD,IAAW;AACxBH,QAAAA,QAAQ,IAAIG,KAAZ;AACD,OAFD;AAGAJ,MAAAA,GAAG,CAACK,IAAJ,CAAS,KAAT,EAAgB,MAAM;AACpB,cAAMC,OAAO,GAAGN,GAAG,CAACM,OAAJ,IAAe,EAA/B,CADoB,CAEpB;AAEA;AACA;;AACAN,QAAAA,GAAG,CAACO,SAAJ,GAAgBD,OAAO,CAAC,YAAD,CAAvB;AAEA,cAAME,cAAc,GAAGC,IAAI,CAACC,GAAL,EAAvB;AACA,cAAMC,iBAAiB,GAAGH,cAAc,GAAGnB,GAAG,CAACuB,aAA/C;AAEA,cAAMC,aAAa,GAAGrE,KAAK,CAACsE,aAAN,CAAoB;AACxCC,UAAAA,WAAW,EAAET,OAAO,CAAC,gBAAD,CADoB;AAExCU,UAAAA,OAAO,EAAEV,OAAO,CAAC,gBAAD,CAFwB;AAGxCW,UAAAA,eAAe,EAAEX,OAAO,CAAC,iBAAD,CAHgB;AAIxChD,UAAAA,MAAM,EAAE+B,GAAG,CAAC6B,aAAJ,CAAkB5D,MAJc;AAKxCf,UAAAA,IAAI,EAAE8C,GAAG,CAAC6B,aAAJ,CAAkB3E,IALgB;AAMxC4E,UAAAA,MAAM,EAAEnB,GAAG,CAACoB,UAN4B;AAOxCC,UAAAA,UAAU,EAAErB,GAAG,CAACO,SAPwB;AAQxCe,UAAAA,OAAO,EAAEX,iBAR+B;AASxCY,UAAAA,kBAAkB,EAAElC,GAAG,CAACuB,aATgB;AAUxCY,UAAAA,gBAAgB,EAAEhB;AAVsB,SAApB,CAAtB;;AAaA,aAAK5C,OAAL,CAAa6D,QAAb,CAAsBC,IAAtB,CAA2B,UAA3B,EAAuCb,aAAvC;;AAEA,YAAI;AACFZ,UAAAA,QAAQ,GAAG0B,IAAI,CAACC,KAAL,CAAW3B,QAAX,CAAX;;AAEA,cAAIA,QAAQ,CAAC4B,KAAb,EAAoB;AAClB,gBAAIC,GAAJ,CADkB,CAGlB;AACA;;AACA,gBAAI,OAAO7B,QAAQ,CAAC4B,KAAhB,KAA0B,QAA9B,EAAwC;AACtC5B,cAAAA,QAAQ,CAAC4B,KAAT,GAAiB;AACfE,gBAAAA,IAAI,EAAE9B,QAAQ,CAAC4B,KADA;AAEfhC,gBAAAA,OAAO,EAAEI,QAAQ,CAAC+B;AAFH,eAAjB;AAID;;AAED/B,YAAAA,QAAQ,CAAC4B,KAAT,CAAevB,OAAf,GAAyBA,OAAzB;AACAL,YAAAA,QAAQ,CAAC4B,KAAT,CAAeT,UAAf,GAA4BpB,GAAG,CAACoB,UAAhC;AACAnB,YAAAA,QAAQ,CAAC4B,KAAT,CAAetB,SAAf,GAA2BP,GAAG,CAACO,SAA/B;;AAEA,gBAAIP,GAAG,CAACoB,UAAJ,KAAmB,GAAvB,EAA4B;AAC1BU,cAAAA,GAAG,GAAG,IAAIpF,yBAAJ,CAA8BuD,QAAQ,CAAC4B,KAAvC,CAAN;AACD,aAFD,MAEO,IAAI7B,GAAG,CAACoB,UAAJ,KAAmB,GAAvB,EAA4B;AACjCU,cAAAA,GAAG,GAAG,IAAInF,qBAAJ,CAA0BsD,QAAQ,CAAC4B,KAAnC,CAAN;AACD,aAFM,MAEA,IAAI7B,GAAG,CAACoB,UAAJ,KAAmB,GAAvB,EAA4B;AACjCU,cAAAA,GAAG,GAAG,IAAIlF,oBAAJ,CAAyBqD,QAAQ,CAAC4B,KAAlC,CAAN;AACD,aAFM,MAEA;AACLC,cAAAA,GAAG,GAAGjF,WAAW,CAACoF,QAAZ,CAAqBhC,QAAQ,CAAC4B,KAA9B,CAAN;AACD;;AACD,mBAAOvC,QAAQ,CAACM,IAAT,CAAc,IAAd,EAAoBkC,GAApB,EAAyB,IAAzB,CAAP;AACD;AACF,SA9BD,CA8BE,OAAOI,CAAP,EAAU;AACV,iBAAO5C,QAAQ,CAACM,IAAT,CACL,IADK,EAEL,IAAI9C,cAAJ,CAAmB;AACjB+C,YAAAA,OAAO,EAAE,2CADQ;AAEjBI,YAAAA,QAFiB;AAGjBkC,YAAAA,SAAS,EAAED,CAHM;AAIjB3B,YAAAA,SAAS,EAAED,OAAO,CAAC,YAAD;AAJD,WAAnB,CAFK,EAQL,IARK,CAAP;AAUD;;AAED,aAAK8B,qBAAL,CAA2BpC,GAAG,CAACO,SAA/B,EAA0CI,iBAA1C,EArEoB,CAuEpB;;;AACA0B,QAAAA,MAAM,CAACC,cAAP,CAAsBrC,QAAtB,EAAgC,cAAhC,EAAgD;AAC9CsC,UAAAA,UAAU,EAAE,KADkC;AAE9CC,UAAAA,QAAQ,EAAE,KAFoC;AAG9CC,UAAAA,KAAK,EAAEzC;AAHuC,SAAhD;AAKAV,QAAAA,QAAQ,CAACM,IAAT,CAAc,IAAd,EAAoB,IAApB,EAA0BK,QAA1B;AACD,OA9ED;AA+ED,KAtFD;AAuFD,GAnJwB;;AAqJzByC,EAAAA,+BAA+B,CAACC,cAAD,EAAiB;AAC9C,WAAQ,mDACNA,cAAc,GAAG,CAAjB,GAAsB,wBAAuBA,cAAe,SAA5D,GAAuE,EACxE,EAFD;AAGD,GAzJwB;;AA2JzBC,EAAAA,aAAa,CAACvD,GAAD,EAAMsD,cAAN,EAAsBrD,QAAtB,EAAgC;AAC3C,WAAQuC,KAAD,IAAW;AAChB,UAAIxC,GAAG,CAACK,UAAR,EAAoB;AAClB;AACA;AACD;;AACDJ,MAAAA,QAAQ,CAACM,IAAT,CACE,IADF,EAEE,IAAInD,qBAAJ,CAA0B;AACxBoD,QAAAA,OAAO,EAAE,KAAK6C,+BAAL,CAAqCC,cAArC,CADe;AAExB7C,QAAAA,MAAM,EAAE+B;AAFgB,OAA1B,CAFF,EAME,IANF;AAQD,KAbD;AAcD,GA1KwB;;AA4KzB;AACAgB,EAAAA,YAAY,CAAC7C,GAAD,EAAM8C,UAAN,EAAkBC,UAAlB,EAA8B;AACxC;AACA,QAAID,UAAU,IAAIC,UAAlB,EAA8B;AAC5B,aAAO,KAAP;AACD,KAJuC,CAMxC;;;AACA,QAAI,CAAC/C,GAAL,EAAU;AACR,aAAO,IAAP;AACD,KATuC,CAWxC;AACA;;;AACA,QAAIA,GAAG,CAACM,OAAJ,IAAeN,GAAG,CAACM,OAAJ,CAAY,qBAAZ,MAAuC,OAA1D,EAAmE;AACjE,aAAO,KAAP;AACD;;AACD,QAAIN,GAAG,CAACM,OAAJ,IAAeN,GAAG,CAACM,OAAJ,CAAY,qBAAZ,MAAuC,MAA1D,EAAkE;AAChE,aAAO,IAAP;AACD,KAlBuC,CAoBxC;;;AACA,QAAIN,GAAG,CAACoB,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B,aAAO,IAAP;AACD,KAvBuC,CAyBxC;AACA;AACA;AACA;AACA;;;AACA,QAAIpB,GAAG,CAACoB,UAAJ,IAAkB,GAAtB,EAA2B;AACzB,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD,GAhNwB;;AAkNzB4B,EAAAA,iBAAiB,CAACF,UAAD,EAAaG,UAAU,GAAG,IAA1B,EAAgC;AAC/C,UAAMC,wBAAwB,GAAG,KAAKtF,OAAL,CAAauF,2BAAb,EAAjC;;AACA,UAAMC,oBAAoB,GAAG,KAAKxF,OAAL,CAAayF,uBAAb,EAA7B,CAF+C,CAI/C;AACA;AACA;;;AACA,QAAIC,YAAY,GAAGC,IAAI,CAACC,GAAL,CACjBN,wBAAwB,GAAGK,IAAI,CAACE,GAAL,CAASX,UAAU,GAAG,CAAtB,EAAyB,CAAzB,CADV,EAEjBM,oBAFiB,CAAnB,CAP+C,CAY/C;AACA;;AACAE,IAAAA,YAAY,IAAI,OAAO,IAAIC,IAAI,CAACG,MAAL,EAAX,CAAhB,CAd+C,CAgB/C;;AACAJ,IAAAA,YAAY,GAAGC,IAAI,CAACI,GAAL,CAAST,wBAAT,EAAmCI,YAAnC,CAAf,CAjB+C,CAmB/C;;AACA,QAAIM,MAAM,CAACC,SAAP,CAAiBZ,UAAjB,KAAgCA,UAAU,IAAIxF,oBAAlD,EAAwE;AACtE6F,MAAAA,YAAY,GAAGC,IAAI,CAACI,GAAL,CAASL,YAAT,EAAuBL,UAAvB,CAAf;AACD;;AAED,WAAOK,YAAY,GAAG,IAAtB;AACD,GA3OwB;;AA6OzB;AACAQ,EAAAA,qBAAqB,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AACnC,WAAOA,QAAQ,CAACC,iBAAT,IACLJ,MAAM,CAACC,SAAP,CAAiBE,QAAQ,CAACC,iBAA1B,CADK,GAEHD,QAAQ,CAACC,iBAFN,GAGH,KAAKpG,OAAL,CAAaqG,oBAAb,EAHJ;AAID,GAnPwB;;AAqPzBC,EAAAA,sBAAsB,CAAC5G,MAAD,EAASyG,QAAT,EAAmB;AACvC;AACA,UAAMhB,UAAU,GAAG,KAAKe,qBAAL,CAA2BC,QAA3B,CAAnB;;AAEA,QAAIzG,MAAM,KAAK,MAAX,IAAqByF,UAAU,GAAG,CAAtC,EAAyC;AACvC,aAAQ,qBAAoBvG,KAAK,CAAC2H,KAAN,EAAc,EAA1C;AACD;;AACD,WAAO,IAAP;AACD,GA7PwB;;AA+PzBC,EAAAA,YAAY,CACVC,IADU,EAEVC,aAFU,EAGVC,UAHU,EAIVC,eAJU,EAKVlH,MALU,EAMVmH,mBANU,EAOVC,oBAPU,EAQV;AACA,UAAMC,cAAc,GAAG;AACrB;AACAC,MAAAA,aAAa,EAAEP,IAAI,GAAI,UAASA,IAAK,EAAlB,GAAsB,KAAKzG,OAAL,CAAaI,WAAb,CAAyB,MAAzB,CAFpB;AAGrB6G,MAAAA,MAAM,EAAE,kBAHa;AAIrB,sBAAgB,mCAJK;AAKrB,wBAAkBP,aALG;AAMrB,oBAAc,KAAKQ,mBAAL,EANO;AAOrB,oCAA8BN,eAPT;AAQrB,mCAA6B,KAAKO,mBAAL,EARR;AASrB,wBAAkBR,UATG;AAUrB,yBAAmB,KAAKL,sBAAL,CACjB5G,MADiB,EAEjBoH,oBAFiB;AAVE,KAAvB;AAgBA,WAAOrC,MAAM,CAAC2C,MAAP,CACLxI,KAAK,CAACsE,aAAN,CAAoB6D,cAApB,CADK,EAEL;AACAnI,IAAAA,KAAK,CAACyI,gBAAN,CAAuBR,mBAAvB,CAHK,CAAP;AAKD,GA7RwB;;AA+RzBK,EAAAA,mBAAmB,GAAG;AACpB,UAAMI,cAAc,GAAG,KAAKtH,OAAL,CAAauH,WAAb,CAAyB,iBAAzB,CAAvB;;AACA,UAAMC,OAAO,GAAG,KAAKxH,OAAL,CAAayH,QAAb,GACZ,KAAKzH,OAAL,CAAa0H,kBAAb,EADY,GAEZ,EAFJ;AAIA,WAAQ,0BAAyBJ,cAAe,IAAGE,OAAQ,EAApD,CAAsDG,IAAtD,EAAP;AACD,GAtSwB;;AAwSzBR,EAAAA,mBAAmB,GAAG;AACpB,QACE,KAAKnH,OAAL,CAAa4H,mBAAb,MACA,KAAK5H,OAAL,CAAa6H,mBAAb,CAAiCC,MAAjC,GAA0C,CAF5C,EAGE;AACA,YAAMC,OAAO,GAAG,KAAK/H,OAAL,CAAa6H,mBAAb,CAAiCG,KAAjC,EAAhB;;AACA,aAAOjE,IAAI,CAACkE,SAAL,CAAe;AACpBC,QAAAA,oBAAoB,EAAEH;AADF,OAAf,CAAP;AAGD;AACF,GAlTwB;;AAoTzBvD,EAAAA,qBAAqB,CAAC7B,SAAD,EAAYI,iBAAZ,EAA+B;AAClD,QAAI,KAAK/C,OAAL,CAAa4H,mBAAb,MAAsCjF,SAA1C,EAAqD;AACnD,UACE,KAAK3C,OAAL,CAAa6H,mBAAb,CAAiCC,MAAjC,GACAvI,cAAc,CAACK,4BAFjB,EAGE;AACAhB,QAAAA,KAAK,CAACuJ,WAAN,CACE,6DADF;AAGD,OAPD,MAOO;AACL,aAAKnI,OAAL,CAAa6H,mBAAb,CAAiCO,IAAjC,CAAsC;AACpC3E,UAAAA,UAAU,EAAEd,SADwB;AAEpC0F,UAAAA,mBAAmB,EAAEtF;AAFe,SAAtC;AAID;AACF;AACF,GApUwB;;AAsUzBuF,EAAAA,QAAQ,CAAC5I,MAAD,EAAS6I,IAAT,EAAe5J,IAAf,EAAqB6J,IAArB,EAA2B/B,IAA3B,EAAiCgC,OAAO,GAAG,EAA3C,EAA+C/G,QAA/C,EAAyD;AAC/D,QAAIgH,WAAJ;;AAEA,UAAMC,YAAY,GAAG,CACnBC,SADmB,EAEnBjC,UAFmB,EAGnBjE,OAHmB,EAInBqC,cAJmB,EAKnBM,UALmB,KAMhB;AACH,aAAOwD,UAAU,CACfD,SADe,EAEf,KAAKxD,iBAAL,CAAuBL,cAAvB,EAAuCM,UAAvC,CAFe,EAGfsB,UAHe,EAIfjE,OAJe,EAKfqC,cAAc,GAAG,CALF,CAAjB;AAOD,KAdD;;AAgBA,UAAM+D,WAAW,GAAG,CAACnC,UAAD,EAAajE,OAAb,EAAsBwC,UAAtB,KAAqC;AACvD;AACA,YAAM1D,OAAO,GACXiH,OAAO,CAACtC,QAAR,IACAH,MAAM,CAACC,SAAP,CAAiBwC,OAAO,CAACtC,QAAR,CAAiB3E,OAAlC,CADA,IAEAiH,OAAO,CAACtC,QAAR,CAAiB3E,OAAjB,IAA4B,CAF5B,GAGIiH,OAAO,CAACtC,QAAR,CAAiB3E,OAHrB,GAII,KAAKxB,OAAL,CAAaI,WAAb,CAAyB,SAAzB,CALN;AAOA,YAAM2I,oBAAoB,GACxB,KAAK/I,OAAL,CAAaI,WAAb,CAAyB,UAAzB,KAAwC,MAD1C;;AAEA,UAAI4I,KAAK,GAAG,KAAKhJ,OAAL,CAAaI,WAAb,CAAyB,OAAzB,CAAZ;;AACA,UAAI4I,KAAK,IAAI,IAAb,EAAmB;AACjBA,QAAAA,KAAK,GAAGD,oBAAoB,GAAG5J,gBAAH,GAAsBG,iBAAlD;AACD;;AAED,YAAMmC,GAAG,GAAG,CAACsH,oBAAoB,GAAGvK,IAAH,GAAUE,KAA/B,EAAsCuK,OAAtC,CAA8C;AACxDV,QAAAA,IAAI,EAAEA,IAAI,IAAI,KAAKvI,OAAL,CAAaI,WAAb,CAAyB,MAAzB,CAD0C;AAExD8I,QAAAA,IAAI,EAAE,KAAKlJ,OAAL,CAAaI,WAAb,CAAyB,MAAzB,CAFkD;AAGxDzB,QAAAA,IAHwD;AAIxDe,QAAAA,MAJwD;AAKxDsJ,QAAAA,KALwD;AAMxDtG,QAAAA,OANwD;AAOxDyG,QAAAA,OAAO,EAAE;AAP+C,OAA9C,CAAZ;AAUA,YAAMC,gBAAgB,GAAGvG,IAAI,CAACC,GAAL,EAAzB;AAEA,YAAMuG,YAAY,GAAGzK,KAAK,CAACsE,aAAN,CAAoB;AACvCC,QAAAA,WAAW,EAAEwD,UAD0B;AAEvCvD,QAAAA,OAAO,EAAEV,OAAO,CAAC,gBAAD,CAFuB;AAGvCW,QAAAA,eAAe,EAAEX,OAAO,CAAC,iBAAD,CAHe;AAIvChD,QAAAA,MAJuC;AAKvCf,QAAAA,IALuC;AAMvCgF,QAAAA,kBAAkB,EAAEyF;AANmB,OAApB,CAArB;AASA,YAAMrE,cAAc,GAAGG,UAAU,IAAI,CAArC;;AAEA,YAAMC,UAAU,GAAG,KAAKe,qBAAL,CAA2BuC,OAAO,CAACtC,QAAnC,CAAnB;;AAEA1E,MAAAA,GAAG,CAAC6B,aAAJ,GAAoB+F,YAApB;AAEA5H,MAAAA,GAAG,CAACuB,aAAJ,GAAoBoG,gBAApB;;AAEA,WAAKpJ,OAAL,CAAa6D,QAAb,CAAsBC,IAAtB,CAA2B,SAA3B,EAAsCuF,YAAtC;;AAEA5H,MAAAA,GAAG,CAACoH,UAAJ,CAAerH,OAAf,EAAwB,KAAKD,eAAL,CAAqBC,OAArB,EAA8BC,GAA9B,EAAmCC,QAAnC,CAAxB;AAEAD,MAAAA,GAAG,CAACgB,IAAJ,CAAS,UAAT,EAAsBL,GAAD,IAAS;AAC5B,YAAI,KAAK6C,YAAL,CAAkB7C,GAAlB,EAAuB2C,cAAvB,EAAuCI,UAAvC,CAAJ,EAAwD;AACtD,iBAAOwD,YAAY,CACjBG,WADiB,EAEjBnC,UAFiB,EAGjBjE,OAHiB,EAIjBqC,cAJiB,EAKjB,CAAC,CAAC3C,GAAG,IAAI,EAAR,EAAYM,OAAZ,IAAuB,EAAxB,EAA4B,aAA5B,CALiB,CAAnB;AAOD,SARD,MAQO;AACL,iBAAO,KAAKP,gBAAL,CAAsBV,GAAtB,EAA2BC,QAA3B,EAAqCU,GAArC,CAAP;AACD;AACF,OAZD;AAcAX,MAAAA,GAAG,CAACc,EAAJ,CAAO,OAAP,EAAiB0B,KAAD,IAAW;AACzB,YAAI,KAAKgB,YAAL,CAAkB,IAAlB,EAAwBF,cAAxB,EAAwCI,UAAxC,CAAJ,EAAyD;AACvD,iBAAOwD,YAAY,CACjBG,WADiB,EAEjBnC,UAFiB,EAGjBjE,OAHiB,EAIjBqC,cAJiB,EAKjB,IALiB,CAAnB;AAOD,SARD,MAQO;AACL,iBAAO,KAAKC,aAAL,CAAmBvD,GAAnB,EAAwBsD,cAAxB,EAAwCrD,QAAxC,EAAkDuC,KAAlD,CAAP;AACD;AACF,OAZD;AAcAxC,MAAAA,GAAG,CAACgB,IAAJ,CAAS,QAAT,EAAoB6G,MAAD,IAAY;AAC7B,YAAIA,MAAM,CAACC,UAAX,EAAuB;AACrBD,UAAAA,MAAM,CAAC7G,IAAP,CACEsG,oBAAoB,GAAG,SAAH,GAAe,eADrC,EAEE,MAAM;AACJ;AACAtH,YAAAA,GAAG,CAAC+H,KAAJ,CAAUd,WAAV;AACAjH,YAAAA,GAAG,CAACgI,GAAJ;AACD,WANH;AAQD,SATD,MASO;AACL;AACAhI,UAAAA,GAAG,CAAC+H,KAAJ,CAAUd,WAAV;AACAjH,UAAAA,GAAG,CAACgI,GAAJ;AACD;AACF,OAfD;AAgBD,KA7FD;;AA+FA,UAAMC,qBAAqB,GAAG,CAACzF,KAAD,EAAQuE,IAAR,KAAiB;AAC7C,UAAIvE,KAAJ,EAAW;AACT,eAAOvC,QAAQ,CAACuC,KAAD,CAAf;AACD;;AAEDyE,MAAAA,WAAW,GAAGF,IAAd;;AAEA,WAAKxI,OAAL,CAAa2J,kBAAb,CAAiC/C,eAAD,IAAqB;AACnD,cAAMD,UAAU,GAAG,KAAK3G,OAAL,CAAaI,WAAb,CAAyB,SAAzB,CAAnB;;AACA,cAAMsC,OAAO,GAAG,KAAK8D,YAAL,CACdC,IADc,EAEdiC,WAAW,CAACZ,MAFE,EAGdnB,UAHc,EAIdC,eAJc,EAKdlH,MALc,EAMd+I,OAAO,CAAC/F,OANM,EAOd+F,OAAO,CAACtC,QAPM,CAAhB;;AAUA2C,QAAAA,WAAW,CAACnC,UAAD,EAAajE,OAAb,CAAX;AACD,OAbD;AAcD,KArBD;;AAuBA,QAAI,KAAK9B,oBAAT,EAA+B;AAC7B,WAAKA,oBAAL,CACElB,MADF,EAEE8I,IAFF,EAGEC,OAAO,CAAC/F,OAHV,EAIEgH,qBAJF;AAMD,KAPD,MAOO;AACLA,MAAAA,qBAAqB,CAAC,IAAD,EAAO9K,KAAK,CAACgL,oBAAN,CAA2BpB,IAAI,IAAI,EAAnC,CAAP,CAArB;AACD;AACF;;AAzdwB,CAA3B;AA4dAqB,MAAM,CAACC,OAAP,GAAiBvK,cAAjB","sourcesContent":["'use strict';\n\nconst http = require('http');\nconst https = require('https');\nconst path = require('path');\n\nconst utils = require('./utils');\nconst {\n  StripeConnectionError,\n  StripeAuthenticationError,\n  StripePermissionError,\n  StripeRateLimitError,\n  StripeError,\n  StripeAPIError,\n} = require('./Error');\n\nconst defaultHttpAgent = new http.Agent({keepAlive: true});\nconst defaultHttpsAgent = new https.Agent({keepAlive: true});\n\n// Provide extension mechanism for Stripe Resource Sub-Classes\nStripeResource.extend = utils.protoExtend;\n\n// Expose method-creator & prepared (basic) methods\nStripeResource.method = require('./StripeMethod');\nStripeResource.BASIC_METHODS = require('./StripeMethod.basic');\n\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\nconst MAX_RETRY_AFTER_WAIT = 60;\n\n/**\n * Encapsulates request logic for a Stripe Resource\n */\nfunction StripeResource(stripe, deprecatedUrlData) {\n  this._stripe = stripe;\n  if (deprecatedUrlData) {\n    throw new Error(\n      'Support for curried url params was dropped in stripe-node v7.0.0. Instead, pass two ids.'\n    );\n  }\n\n  this.basePath = utils.makeURLInterpolator(\n    this.basePath || stripe.getApiField('basePath')\n  );\n  this.resourcePath = this.path;\n  this.path = utils.makeURLInterpolator(this.path);\n\n  if (this.includeBasic) {\n    this.includeBasic.forEach(function(methodName) {\n      this[methodName] = StripeResource.BASIC_METHODS[methodName];\n    }, this);\n  }\n\n  this.initialize(...arguments);\n}\n\nStripeResource.prototype = {\n  path: '',\n\n  // Methods that don't use the API's default '/v1' path can override it with this setting.\n  basePath: null,\n\n  initialize() {},\n\n  // Function to override the default data processor. This allows full control\n  // over how a StripeResource's request data will get converted into an HTTP\n  // body. This is useful for non-standard HTTP requests. The function should\n  // take method name, data, and headers as arguments.\n  requestDataProcessor: null,\n\n  // Function to add a validation checks before sending the request, errors should\n  // be thrown, and they will be passed to the callback/promise.\n  validateRequest: null,\n\n  createFullPath(commandPath, urlData) {\n    return path\n      .join(\n        this.basePath(urlData),\n        this.path(urlData),\n        typeof commandPath == 'function' ? commandPath(urlData) : commandPath\n      )\n      .replace(/\\\\/g, '/'); // ugly workaround for Windows\n  },\n\n  // Creates a relative resource path with symbols left in (unlike\n  // createFullPath which takes some data to replace them with). For example it\n  // might produce: /invoices/{id}\n  createResourcePathWithSymbols(pathWithSymbols) {\n    return `/${path\n      .join(this.resourcePath, pathWithSymbols || '')\n      .replace(/\\\\/g, '/')}`; // ugly workaround for Windows\n  },\n\n  // DEPRECATED: Here for backcompat in case users relied on this.\n  wrapTimeout: utils.callbackifyPromiseWithTimeout,\n\n  _timeoutHandler(timeout, req, callback) {\n    return () => {\n      const timeoutErr = new TypeError('ETIMEDOUT');\n      timeoutErr.code = 'ETIMEDOUT';\n\n      req._isAborted = true;\n      req.abort();\n\n      callback.call(\n        this,\n        new StripeConnectionError({\n          message: `Request aborted due to timeout being reached (${timeout}ms)`,\n          detail: timeoutErr,\n        }),\n        null\n      );\n    };\n  },\n\n  _responseHandler(req, callback) {\n    return (res) => {\n      let response = '';\n\n      res.setEncoding('utf8');\n      res.on('data', (chunk) => {\n        response += chunk;\n      });\n      res.once('end', () => {\n        const headers = res.headers || {};\n        // NOTE: Stripe responds with lowercase header names/keys.\n\n        // For convenience, make Request-Id easily accessible on\n        // lastResponse.\n        res.requestId = headers['request-id'];\n\n        const requestEndTime = Date.now();\n        const requestDurationMs = requestEndTime - req._requestStart;\n\n        const responseEvent = utils.removeNullish({\n          api_version: headers['stripe-version'],\n          account: headers['stripe-account'],\n          idempotency_key: headers['idempotency-key'],\n          method: req._requestEvent.method,\n          path: req._requestEvent.path,\n          status: res.statusCode,\n          request_id: res.requestId,\n          elapsed: requestDurationMs,\n          request_start_time: req._requestStart,\n          request_end_time: requestEndTime,\n        });\n\n        this._stripe._emitter.emit('response', responseEvent);\n\n        try {\n          response = JSON.parse(response);\n\n          if (response.error) {\n            let err;\n\n            // Convert OAuth error responses into a standard format\n            // so that the rest of the error logic can be shared\n            if (typeof response.error === 'string') {\n              response.error = {\n                type: response.error,\n                message: response.error_description,\n              };\n            }\n\n            response.error.headers = headers;\n            response.error.statusCode = res.statusCode;\n            response.error.requestId = res.requestId;\n\n            if (res.statusCode === 401) {\n              err = new StripeAuthenticationError(response.error);\n            } else if (res.statusCode === 403) {\n              err = new StripePermissionError(response.error);\n            } else if (res.statusCode === 429) {\n              err = new StripeRateLimitError(response.error);\n            } else {\n              err = StripeError.generate(response.error);\n            }\n            return callback.call(this, err, null);\n          }\n        } catch (e) {\n          return callback.call(\n            this,\n            new StripeAPIError({\n              message: 'Invalid JSON received from the Stripe API',\n              response,\n              exception: e,\n              requestId: headers['request-id'],\n            }),\n            null\n          );\n        }\n\n        this._recordRequestMetrics(res.requestId, requestDurationMs);\n\n        // Expose res object\n        Object.defineProperty(response, 'lastResponse', {\n          enumerable: false,\n          writable: false,\n          value: res,\n        });\n        callback.call(this, null, response);\n      });\n    };\n  },\n\n  _generateConnectionErrorMessage(requestRetries) {\n    return `An error occurred with our connection to Stripe.${\n      requestRetries > 0 ? ` Request was retried ${requestRetries} times.` : ''\n    }`;\n  },\n\n  _errorHandler(req, requestRetries, callback) {\n    return (error) => {\n      if (req._isAborted) {\n        // already handled\n        return;\n      }\n      callback.call(\n        this,\n        new StripeConnectionError({\n          message: this._generateConnectionErrorMessage(requestRetries),\n          detail: error,\n        }),\n        null\n      );\n    };\n  },\n\n  // For more on when and how to retry API requests, see https://stripe.com/docs/error-handling#safely-retrying-requests-with-idempotency\n  _shouldRetry(res, numRetries, maxRetries) {\n    // Do not retry if we are out of retries.\n    if (numRetries >= maxRetries) {\n      return false;\n    }\n\n    // Retry on connection error.\n    if (!res) {\n      return true;\n    }\n\n    // The API may ask us not to retry (e.g., if doing so would be a no-op)\n    // or advise us to retry (e.g., in cases of lock timeouts); we defer to that.\n    if (res.headers && res.headers['stripe-should-retry'] === 'false') {\n      return false;\n    }\n    if (res.headers && res.headers['stripe-should-retry'] === 'true') {\n      return true;\n    }\n\n    // Retry on conflict errors.\n    if (res.statusCode === 409) {\n      return true;\n    }\n\n    // Retry on 500, 503, and other internal errors.\n    //\n    // Note that we expect the stripe-should-retry header to be false\n    // in most cases when a 500 is returned, since our idempotency framework\n    // would typically replay it anyway.\n    if (res.statusCode >= 500) {\n      return true;\n    }\n\n    return false;\n  },\n\n  _getSleepTimeInMS(numRetries, retryAfter = null) {\n    const initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n    const maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay();\n\n    // Apply exponential backoff with initialNetworkRetryDelay on the\n    // number of numRetries so far as inputs. Do not allow the number to exceed\n    // maxNetworkRetryDelay.\n    let sleepSeconds = Math.min(\n      initialNetworkRetryDelay * Math.pow(numRetries - 1, 2),\n      maxNetworkRetryDelay\n    );\n\n    // Apply some jitter by randomizing the value in the range of\n    // (sleepSeconds / 2) to (sleepSeconds).\n    sleepSeconds *= 0.5 * (1 + Math.random());\n\n    // But never sleep less than the base sleep seconds.\n    sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds);\n\n    // And never sleep less than the time the API asks us to wait, assuming it's a reasonable ask.\n    if (Number.isInteger(retryAfter) && retryAfter <= MAX_RETRY_AFTER_WAIT) {\n      sleepSeconds = Math.max(sleepSeconds, retryAfter);\n    }\n\n    return sleepSeconds * 1000;\n  },\n\n  // Max retries can be set on a per request basis. Favor those over the global setting\n  _getMaxNetworkRetries(settings = {}) {\n    return settings.maxNetworkRetries &&\n      Number.isInteger(settings.maxNetworkRetries)\n      ? settings.maxNetworkRetries\n      : this._stripe.getMaxNetworkRetries();\n  },\n\n  _defaultIdempotencyKey(method, settings) {\n    // If this is a POST and we allow multiple retries, ensure an idempotency key.\n    const maxRetries = this._getMaxNetworkRetries(settings);\n\n    if (method === 'POST' && maxRetries > 0) {\n      return `stripe-node-retry-${utils.uuid4()}`;\n    }\n    return null;\n  },\n\n  _makeHeaders(\n    auth,\n    contentLength,\n    apiVersion,\n    clientUserAgent,\n    method,\n    userSuppliedHeaders,\n    userSuppliedSettings\n  ) {\n    const defaultHeaders = {\n      // Use specified auth token or use default from this stripe instance:\n      Authorization: auth ? `Bearer ${auth}` : this._stripe.getApiField('auth'),\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Content-Length': contentLength,\n      'User-Agent': this._getUserAgentString(),\n      'X-Stripe-Client-User-Agent': clientUserAgent,\n      'X-Stripe-Client-Telemetry': this._getTelemetryHeader(),\n      'Stripe-Version': apiVersion,\n      'Idempotency-Key': this._defaultIdempotencyKey(\n        method,\n        userSuppliedSettings\n      ),\n    };\n\n    return Object.assign(\n      utils.removeNullish(defaultHeaders),\n      // If the user supplied, say 'idempotency-key', override instead of appending by ensuring caps are the same.\n      utils.normalizeHeaders(userSuppliedHeaders)\n    );\n  },\n\n  _getUserAgentString() {\n    const packageVersion = this._stripe.getConstant('PACKAGE_VERSION');\n    const appInfo = this._stripe._appInfo\n      ? this._stripe.getAppInfoAsString()\n      : '';\n\n    return `Stripe/v1 NodeBindings/${packageVersion} ${appInfo}`.trim();\n  },\n\n  _getTelemetryHeader() {\n    if (\n      this._stripe.getTelemetryEnabled() &&\n      this._stripe._prevRequestMetrics.length > 0\n    ) {\n      const metrics = this._stripe._prevRequestMetrics.shift();\n      return JSON.stringify({\n        last_request_metrics: metrics,\n      });\n    }\n  },\n\n  _recordRequestMetrics(requestId, requestDurationMs) {\n    if (this._stripe.getTelemetryEnabled() && requestId) {\n      if (\n        this._stripe._prevRequestMetrics.length >\n        StripeResource.MAX_BUFFERED_REQUEST_METRICS\n      ) {\n        utils.emitWarning(\n          'Request metrics buffer is full, dropping telemetry message.'\n        );\n      } else {\n        this._stripe._prevRequestMetrics.push({\n          request_id: requestId,\n          request_duration_ms: requestDurationMs,\n        });\n      }\n    }\n  },\n\n  _request(method, host, path, data, auth, options = {}, callback) {\n    let requestData;\n\n    const retryRequest = (\n      requestFn,\n      apiVersion,\n      headers,\n      requestRetries,\n      retryAfter\n    ) => {\n      return setTimeout(\n        requestFn,\n        this._getSleepTimeInMS(requestRetries, retryAfter),\n        apiVersion,\n        headers,\n        requestRetries + 1\n      );\n    };\n\n    const makeRequest = (apiVersion, headers, numRetries) => {\n      // timeout can be set on a per-request basis. Favor that over the global setting\n      const timeout =\n        options.settings &&\n        Number.isInteger(options.settings.timeout) &&\n        options.settings.timeout >= 0\n          ? options.settings.timeout\n          : this._stripe.getApiField('timeout');\n\n      const isInsecureConnection =\n        this._stripe.getApiField('protocol') == 'http';\n      let agent = this._stripe.getApiField('agent');\n      if (agent == null) {\n        agent = isInsecureConnection ? defaultHttpAgent : defaultHttpsAgent;\n      }\n\n      const req = (isInsecureConnection ? http : https).request({\n        host: host || this._stripe.getApiField('host'),\n        port: this._stripe.getApiField('port'),\n        path,\n        method,\n        agent,\n        headers,\n        ciphers: 'DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:!MD5',\n      });\n\n      const requestStartTime = Date.now();\n\n      const requestEvent = utils.removeNullish({\n        api_version: apiVersion,\n        account: headers['Stripe-Account'],\n        idempotency_key: headers['Idempotency-Key'],\n        method,\n        path,\n        request_start_time: requestStartTime,\n      });\n\n      const requestRetries = numRetries || 0;\n\n      const maxRetries = this._getMaxNetworkRetries(options.settings);\n\n      req._requestEvent = requestEvent;\n\n      req._requestStart = requestStartTime;\n\n      this._stripe._emitter.emit('request', requestEvent);\n\n      req.setTimeout(timeout, this._timeoutHandler(timeout, req, callback));\n\n      req.once('response', (res) => {\n        if (this._shouldRetry(res, requestRetries, maxRetries)) {\n          return retryRequest(\n            makeRequest,\n            apiVersion,\n            headers,\n            requestRetries,\n            ((res || {}).headers || {})['retry-after']\n          );\n        } else {\n          return this._responseHandler(req, callback)(res);\n        }\n      });\n\n      req.on('error', (error) => {\n        if (this._shouldRetry(null, requestRetries, maxRetries)) {\n          return retryRequest(\n            makeRequest,\n            apiVersion,\n            headers,\n            requestRetries,\n            null\n          );\n        } else {\n          return this._errorHandler(req, requestRetries, callback)(error);\n        }\n      });\n\n      req.once('socket', (socket) => {\n        if (socket.connecting) {\n          socket.once(\n            isInsecureConnection ? 'connect' : 'secureConnect',\n            () => {\n              // Send payload; we're safe:\n              req.write(requestData);\n              req.end();\n            }\n          );\n        } else {\n          // we're already connected\n          req.write(requestData);\n          req.end();\n        }\n      });\n    };\n\n    const prepareAndMakeRequest = (error, data) => {\n      if (error) {\n        return callback(error);\n      }\n\n      requestData = data;\n\n      this._stripe.getClientUserAgent((clientUserAgent) => {\n        const apiVersion = this._stripe.getApiField('version');\n        const headers = this._makeHeaders(\n          auth,\n          requestData.length,\n          apiVersion,\n          clientUserAgent,\n          method,\n          options.headers,\n          options.settings\n        );\n\n        makeRequest(apiVersion, headers);\n      });\n    };\n\n    if (this.requestDataProcessor) {\n      this.requestDataProcessor(\n        method,\n        data,\n        options.headers,\n        prepareAndMakeRequest\n      );\n    } else {\n      prepareAndMakeRequest(null, utils.stringifyRequestData(data || {}));\n    }\n  },\n};\n\nmodule.exports = StripeResource;\n"]},"metadata":{},"sourceType":"script"}